/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var t={426:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,':root {\n    --primary: #519872ff;\n    --primary-lighter: #09bc8aff;\n    --secondary: #118ab2ff;\n\n    --neutral-dark: #2b303aff;\n    --neutral-mid: rgb(127, 131, 136);\n    --neutral-light: #ebebebff;\n\n    --semantic-bad: rgb(207, 78, 100);\n    --semantic-good: #37FF8Bff;   \n}\n\nhtml { \n    font-family: Helvetica, sans-serif;\n    font-size: 18px;\n    color: var(--neutral-light);\n}\n\nbody { \n    height: 100%;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbutton, input, label {\n    box-sizing:content-box;\n    border: none;\n    background-color: inherit;\n    font-family: inherit; \n    font-size: inherit;\n    color: inherit;\n\n    cursor: pointer;\n    display: block;\n}\n\nbutton:active, input:active, label:active{\n    cursor: default;\n}\n\n:where(textarea),\n:where(input[type="text"], input[type="search"], input[type="password"], input[type="url"]){\n  appearance: none;\n  border-style: solid;\n  outline: none;\n} \n\n/* input::placeholder {\n    color: var(--primary-fade);\n    color-scheme: var(--primary-fade);\n} */\n\nul {\n    list-style: none;\n}\n\nsvg {\n    width: 30px;\n    fill: var(--neutral-light);\n}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.hidden {\n    display: none;\n}\n\n/* Actual custom styling things below */ \nhtml {\n    height: 100%;\n}\n\nbody {\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n/* header stuff */ \nheader {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    padding: 15px 40px;\n    gap: 20px;\n}\n\n.day-changer {\n    --day-entry-width: 180px; \n    display: flex;\n    gap: 10px;\n    align-items: center;\n    width: var(--day-entry-width);\n    overflow-x: hidden;\n    position: relative;\n}\n\n.day-changer .slider {\n    width: 300%;\n    display: flex;\n    position: relative;\n    align-items: center;\n    right: 0;\n}\n\n.day-changer .slider span {\n    width: var(--day-entry-width);\n    text-align: center;\n    display: block;\n}\n\nheader .day-changer .arrow {\n    top: 8%;\n    width: 30px;\n    margin: 0 30px;\n}\n\n.todays-stats {\n    grid-row: 1 / 3;\n    grid-column: 2 / 3;\n\n    justify-self: right;\n    width: 70%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n}\n\n.todays-stats .condition-icon {\n    width: 60px;\n    height: 60px;\n}\n\n.search-holder {\n    position: relative;\n    width: 50%;\n}\n\n#search {\n    width: 100%;\n    font-size: 1.5rem;\n}\n\n#search:invalid {\n    border: var(--semantic-bad);\n}\n\n.search-holder .error {\n    font-size: 0.7rem;\n    color: var(--semantic-bad);\n    position: absolute;\n    bottom: -16px;\n}\n\n.rain-chancer, .snow-chancer {\n    width: 60px;\n    height: 60px;\n    text-align: center;\n    border-radius: 50%;\n    display: grid;\n    align-content: center;\n    position: relative;\n}\n\n.rain-chancer:hover::after {\n    content: \'Chance of rain\';\n    font-size: 0.7rem;\n    position: absolute;\n    top: 110%;\n    text-align: center;\n    width: 100%;\n}\n\n.snow-chancer:hover::after {\n    content: \'Chance of snow\';\n    font-size: 0.7rem;\n    position: absolute;\n    top: 110%;\n    text-align: center;\n    width: 100%;\n}\n\n/* Main section */\nmain {\n    display: grid;\n    justify-items: center;\n    align-items: end;\n\n    padding: 20px 40px;\n}\n\n.carousel {\n    width: 100%; \n    height: 100%;\n    position: relative;\n}\n\n.slider-frame {\n    width: 100%;\n    height: 100%;\n    display: flex;\n\n    overflow-x: hidden;\n}\n\n.arrow {\n    position: absolute;\n}\n\n.arrow:disabled svg {\n    fill: var(--neutral-mid);\n}\n\n.left.arrow {\n    left: -22px;\n    top: 40%;\n}\n.right.arrow {\n    right: -22px;\n    top: 40%\n}\n\n.slider-board {\n    display: grid;\n    grid-template-rows: 1fr;\n    grid-auto-flow: column;\n\n    /* width: 200%;\n    grid-auto-columns: calc(200% / 12); */\n\n    position: relative;\n    right: 0;\n    transition: right 0.3s linear;\n}\n\n.card {\n    display: grid;\n    grid-template-rows: 80% auto auto;\n    justify-items: center;\n    align-items: center;\n    margin: 0 12px;\n    box-sizing: border-box;\n}\n\n.card .temp-bar {\n    align-self: self-end;\n    text-align: center;\n    height: 100%;\n    width: 100%;\n\n    --top-radius: 16px; \n    border-top-right-radius: var(--top-radius);\n    border-top-left-radius: var(--top-radius);\n\n    box-sizing: border-box;\n    padding-top: 20%;\n    overflow: hidden;\n    font-weight: bold;\n}\n\n.card .temp-display {\n    font-size: 1.5rem;\n}\n\n.card .condition-icon {\n    width: 50%;\n}\n\n.condition-icon {\n    background-color: var(--neutral-dark);\n    border-radius: 50%;\n    padding: 3px;\n    box-sizing: border-box;\n}\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n    --primary: #519872ff;\n    --primary-lighter: #09bc8aff;\n    --secondary: #118ab2ff;\n\n    --neutral-dark: #2b303aff;\n    --neutral-mid: rgb(127, 131, 136);\n    --neutral-light: #ebebebff;\n\n    --semantic-bad: rgb(207, 78, 100);\n    --semantic-good: #37FF8Bff;   \n}\n\nhtml { \n    font-family: Helvetica, sans-serif;\n    font-size: 18px;\n    color: var(--neutral-light);\n}\n\nbody { \n    height: 100%;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbutton, input, label {\n    box-sizing:content-box;\n    border: none;\n    background-color: inherit;\n    font-family: inherit; \n    font-size: inherit;\n    color: inherit;\n\n    cursor: pointer;\n    display: block;\n}\n\nbutton:active, input:active, label:active{\n    cursor: default;\n}\n\n:where(textarea),\n:where(input[type="text"], input[type="search"], input[type="password"], input[type="url"]){\n  appearance: none;\n  border-style: solid;\n  outline: none;\n} \n\n/* input::placeholder {\n    color: var(--primary-fade);\n    color-scheme: var(--primary-fade);\n} */\n\nul {\n    list-style: none;\n}\n\nsvg {\n    width: 30px;\n    fill: var(--neutral-light);\n}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.hidden {\n    display: none;\n}\n\n/* Actual custom styling things below */ \nhtml {\n    height: 100%;\n}\n\nbody {\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n/* header stuff */ \nheader {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    padding: 15px 40px;\n    gap: 20px;\n}\n\n.day-changer {\n    --day-entry-width: 180px; \n    display: flex;\n    gap: 10px;\n    align-items: center;\n    width: var(--day-entry-width);\n    overflow-x: hidden;\n    position: relative;\n}\n\n.day-changer .slider {\n    width: 300%;\n    display: flex;\n    position: relative;\n    align-items: center;\n    right: 0;\n}\n\n.day-changer .slider span {\n    width: var(--day-entry-width);\n    text-align: center;\n    display: block;\n}\n\nheader .day-changer .arrow {\n    top: 8%;\n    width: 30px;\n    margin: 0 30px;\n}\n\n.todays-stats {\n    grid-row: 1 / 3;\n    grid-column: 2 / 3;\n\n    justify-self: right;\n    width: 70%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n}\n\n.todays-stats .condition-icon {\n    width: 60px;\n    height: 60px;\n}\n\n.search-holder {\n    position: relative;\n    width: 50%;\n}\n\n#search {\n    width: 100%;\n    font-size: 1.5rem;\n}\n\n#search:invalid {\n    border: var(--semantic-bad);\n}\n\n.search-holder .error {\n    font-size: 0.7rem;\n    color: var(--semantic-bad);\n    position: absolute;\n    bottom: -16px;\n}\n\n.rain-chancer, .snow-chancer {\n    width: 60px;\n    height: 60px;\n    text-align: center;\n    border-radius: 50%;\n    display: grid;\n    align-content: center;\n    position: relative;\n}\n\n.rain-chancer:hover::after {\n    content: \'Chance of rain\';\n    font-size: 0.7rem;\n    position: absolute;\n    top: 110%;\n    text-align: center;\n    width: 100%;\n}\n\n.snow-chancer:hover::after {\n    content: \'Chance of snow\';\n    font-size: 0.7rem;\n    position: absolute;\n    top: 110%;\n    text-align: center;\n    width: 100%;\n}\n\n/* Main section */\nmain {\n    display: grid;\n    justify-items: center;\n    align-items: end;\n\n    padding: 20px 40px;\n}\n\n.carousel {\n    width: 100%; \n    height: 100%;\n    position: relative;\n}\n\n.slider-frame {\n    width: 100%;\n    height: 100%;\n    display: flex;\n\n    overflow-x: hidden;\n}\n\n.arrow {\n    position: absolute;\n}\n\n.arrow:disabled svg {\n    fill: var(--neutral-mid);\n}\n\n.left.arrow {\n    left: -22px;\n    top: 40%;\n}\n.right.arrow {\n    right: -22px;\n    top: 40%\n}\n\n.slider-board {\n    display: grid;\n    grid-template-rows: 1fr;\n    grid-auto-flow: column;\n\n    /* width: 200%;\n    grid-auto-columns: calc(200% / 12); */\n\n    position: relative;\n    right: 0;\n    transition: right 0.3s linear;\n}\n\n.card {\n    display: grid;\n    grid-template-rows: 80% auto auto;\n    justify-items: center;\n    align-items: center;\n    margin: 0 12px;\n    box-sizing: border-box;\n}\n\n.card .temp-bar {\n    align-self: self-end;\n    text-align: center;\n    height: 100%;\n    width: 100%;\n\n    --top-radius: 16px; \n    border-top-right-radius: var(--top-radius);\n    border-top-left-radius: var(--top-radius);\n\n    box-sizing: border-box;\n    padding-top: 20%;\n    overflow: hidden;\n    font-weight: bold;\n}\n\n.card .temp-display {\n    font-size: 1.5rem;\n}\n\n.card .condition-icon {\n    width: 50%;\n}\n\n.condition-icon {\n    background-color: var(--neutral-dark);\n    border-radius: 50%;\n    padding: 3px;\n    box-sizing: border-box;\n}\n\n'],sourceRoot:""}]);const s=i},645:t=>{"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var u=0;u<t.length;u++){var d=[].concat(t[u]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:t=>{"use strict";t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},667:(t,n)=>{function e(t,n){const e=n.indexOf("#",t),r=n.indexOf(".",t);return-1===e?r:-1===r?e:e>r?r:e}n.Sy=function(t,n){let r=e(0,t);const a=r>-1?r:t.length,o=t.slice(0,a),i=0===o.length?"div":o,s=[];let c;for(;r>-1;){const n=e(r+1,t),a=n>-1?n:t.length,o=t.slice(r+1,a);if(0===o.length)throw console.error("Usage error: Tried to use two symbols for class and/or id in a row.");if("."===t.at(r))s.unshift(o);else{if(void 0!==c)throw console.error("Argument error: elements can't have multiple ids");c=o}r=n}const u=document.createElement(i);for(const t of s)u.classList.add(t);return c&&u.setAttribute("id",c),n&&n.append(u),u},n.IO=function(t,n=document){return n.querySelector(t)}},379:t=>{"use strict";var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],d=o[u]||0,l="".concat(u," ").concat(d);o[u]=d+1;var h=e(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)n[h].references++,n[h].updater(f);else{var A=a(f,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:A,references:1})}i.push(l)}return i}function a(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=e(o[i]);n[s].references--}for(var c=r(t,a),u=0;u<o.length;u++){var d=e(o[u]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:t=>{"use strict";var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{"use strict";t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{"use strict";t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{"use strict";t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return t[r](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{"use strict";var t=e(379),n=e.n(t),r=e(795),a=e.n(r),o=e(569),i=e.n(o),s=e(565),c=e.n(s),u=e(216),d=e.n(u),l=e(589),h=e.n(l),f=e(426),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=i().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=d(),n()(f.Z,A),f.Z&&f.Z.locals&&f.Z.locals,Math.pow(10,8);const m=6048e5,g=864e5,p=6e4,y=36e5;function w(t,n){const e=n?.additionalDigits??2,r=function(t){const n={},e=t.split(b.dateTimeDelimiter);let r;if(e.length>2)return n;if(/:/.test(e[0])?r=e[0]:(n.date=e[0],r=e[1],b.timeZoneDelimiter.test(n.date)&&(n.date=t.split(b.timeZoneDelimiter)[0],r=t.substr(n.date.length,t.length))),r){const t=b.timezone.exec(r);t?(n.time=r.replace(t[1],""),n.timezone=t[1]):n.time=r}return n}(t);let a;if(r.date){const t=function(t,n){const e=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=t.match(e);if(!r)return{year:NaN,restDateString:""};const a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:t.slice((r[1]||r[2]).length)}}(r.date,e);a=function(t,n){if(null===n)return new Date(NaN);const e=t.match(v);if(!e)return new Date(NaN);const r=!!e[4],a=I(e[1]),o=I(e[2])-1,i=I(e[3]),s=I(e[4]),c=I(e[5])-1;if(r)return function(t,n,e){return n>=1&&n<=53&&e>=0&&e<=6}(0,s,c)?function(t,n,e){const r=new Date(0);r.setUTCFullYear(t,0,4);const a=7*(n-1)+e+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(n,s,c):new Date(NaN);{const t=new Date(0);return function(t,n,e){return n>=0&&n<=11&&e>=1&&e<=(k[n]||(E(t)?29:28))}(n,o,i)&&function(t,n){return n>=1&&n<=(E(t)?366:365)}(n,a)?(t.setUTCFullYear(n,o,Math.max(a,i)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);const o=a.getTime();let i,s=0;if(r.time&&(s=function(t){const n=t.match(C);if(!n)return NaN;const e=x(n[1]),r=x(n[2]),a=x(n[3]);return function(t,n,e){return 24===t?0===n&&0===e:e>=0&&e<60&&n>=0&&n<60&&t>=0&&t<25}(e,r,a)?e*y+r*p+1e3*a:NaN}(r.time),isNaN(s)))return new Date(NaN);if(!r.timezone){const t=new Date(o+s),n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}return i=function(t){if("Z"===t)return 0;const n=t.match(B);if(!n)return 0;const e="+"===n[1]?-1:1,r=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(t,n){return n>=0&&n<=59}(0,a)?e*(r*y+a*p):NaN}(r.timezone),isNaN(i)?new Date(NaN):new Date(o+s+i)}const b={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},v=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,C=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,B=/^([+-])(\d{2})(?::?(\d{2}))?$/;function I(t){return t?parseInt(t):1}function x(t){return t&&parseFloat(t.replace(",","."))||0}const k=[31,null,31,30,31,30,31,31,30,31,30,31];function E(t){return t%400==0||t%4==0&&t%100!=0}function M(t){const n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new t.constructor(+t):"number"==typeof t||"[object Number]"===n||"string"==typeof t||"[object String]"===n?new Date(t):new Date(NaN)}function S(t){if(!(n=t,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof t))return!1;var n;const e=M(t);return!isNaN(Number(e))}const D={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function T(t){return(n={})=>{const e=n.width?String(n.width):t.defaultWidth;return t.formats[e]||t.formats[t.defaultWidth]}}const W={date:T({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:T({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:T({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},N={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function O(t){return(n,e)=>{let r;if("formatting"===(e?.context?String(e.context):"standalone")&&t.formattingValues){const n=t.defaultFormattingWidth||t.defaultWidth,a=e?.width?String(e.width):n;r=t.formattingValues[a]||t.formattingValues[n]}else{const n=t.defaultWidth,a=e?.width?String(e.width):t.defaultWidth;r=t.values[a]||t.values[n]}return r[t.argumentCallback?t.argumentCallback(n):n]}}const P={ordinalNumber:(t,n)=>{const e=Number(t),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:O({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:O({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:O({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:O({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:O({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Y(t){return(n,e={})=>{const r=e.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=n.match(a);if(!o)return null;const i=o[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,n){for(let n=0;n<t.length;n++)if(t[n].test(i))return n}(s):function(t,n){for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&t[n].test(i))return n}(s);let u;return u=t.valueCallback?t.valueCallback(c):c,u=e.valueCallback?e.valueCallback(u):u,{value:u,rest:n.slice(i.length)}}}const j={ordinalNumber:(L={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,n={})=>{const e=t.match(L.matchPattern);if(!e)return null;const r=e[0],a=t.match(L.parsePattern);if(!a)return null;let o=L.valueCallback?L.valueCallback(a[0]):a[0];return o=n.valueCallback?n.valueCallback(o):o,{value:o,rest:t.slice(r.length)}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var L;const F={code:"en-US",formatDistance:(t,n,e)=>{let r;const a=D[t];return r="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),e?.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:W,formatRelative:(t,n,e,r)=>N[t],localize:P,match:j,options:{weekStartsOn:0,firstWeekContainsDate:1}};let z={};function q(){return z}function H(t){const n=M(t);return n.setHours(0,0,0,0),n}function U(t){const n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),t.getTime()-n.getTime()}function _(t,n){return t instanceof Date?new t.constructor(n):new Date(n)}function G(t){const n=M(t);return function(t,n){const e=H(t),r=H(n),a=e.getTime()-U(e),o=r.getTime()-U(r);return Math.round((a-o)/g)}(n,function(t){const n=M(t),e=_(t,0);return e.setFullYear(n.getFullYear(),0,1),e.setHours(0,0,0,0),e}(n))+1}function X(t,n){const e=q(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,a=M(t),o=a.getDay(),i=(o<r?7:0)+o-r;return a.setDate(a.getDate()-i),a.setHours(0,0,0,0),a}function Q(t){return X(t,{weekStartsOn:1})}function Z(t){const n=M(t),e=n.getFullYear(),r=_(t,0);r.setFullYear(e+1,0,4),r.setHours(0,0,0,0);const a=Q(r),o=_(t,0);o.setFullYear(e,0,4),o.setHours(0,0,0,0);const i=Q(o);return n.getTime()>=a.getTime()?e+1:n.getTime()>=i.getTime()?e:e-1}function $(t){const n=M(t),e=Q(n).getTime()-function(t){const n=Z(t),e=_(t,0);return e.setFullYear(n,0,4),e.setHours(0,0,0,0),Q(e)}(n).getTime();return Math.round(e/m)+1}function R(t,n){const e=M(t),r=e.getFullYear(),a=q(),o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,i=_(t,0);i.setFullYear(r+1,0,o),i.setHours(0,0,0,0);const s=X(i,n),c=_(t,0);c.setFullYear(r,0,o),c.setHours(0,0,0,0);const u=X(c,n);return e.getTime()>=s.getTime()?r+1:e.getTime()>=u.getTime()?r:r-1}function J(t,n){const e=M(t),r=X(e,n).getTime()-function(t,n){const e=q(),r=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??e.firstWeekContainsDate??e.locale?.options?.firstWeekContainsDate??1,a=R(t,n),o=_(t,0);return o.setFullYear(a,0,r),o.setHours(0,0,0,0),X(o,n)}(e,n).getTime();return Math.round(r/m)+1}function V(t,n){return(t<0?"-":"")+Math.abs(t).toString().padStart(n,"0")}const K={y(t,n){const e=t.getFullYear(),r=e>0?e:1-e;return V("yy"===n?r%100:r,n.length)},M(t,n){const e=t.getMonth();return"M"===n?String(e+1):V(e+1,2)},d:(t,n)=>V(t.getDate(),n.length),a(t,n){const e=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.toUpperCase();case"aaa":return e;case"aaaaa":return e[0];default:return"am"===e?"a.m.":"p.m."}},h:(t,n)=>V(t.getHours()%12||12,n.length),H:(t,n)=>V(t.getHours(),n.length),m:(t,n)=>V(t.getMinutes(),n.length),s:(t,n)=>V(t.getSeconds(),n.length),S(t,n){const e=n.length,r=t.getMilliseconds();return V(Math.floor(r*Math.pow(10,e-3)),n.length)}},tt={G:function(t,n,e){const r=t.getFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(t,n,e){if("yo"===n){const n=t.getFullYear(),r=n>0?n:1-n;return e.ordinalNumber(r,{unit:"year"})}return K.y(t,n)},Y:function(t,n,e,r){const a=R(t,r),o=a>0?a:1-a;return"YY"===n?V(o%100,2):"Yo"===n?e.ordinalNumber(o,{unit:"year"}):V(o,n.length)},R:function(t,n){return V(Z(t),n.length)},u:function(t,n){return V(t.getFullYear(),n.length)},Q:function(t,n,e){const r=Math.ceil((t.getMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return V(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,n,e){const r=Math.ceil((t.getMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return V(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,n,e){const r=t.getMonth();switch(n){case"M":case"MM":return K.M(t,n);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(t,n,e){const r=t.getMonth();switch(n){case"L":return String(r+1);case"LL":return V(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,e,r){const a=J(t,r);return"wo"===n?e.ordinalNumber(a,{unit:"week"}):V(a,n.length)},I:function(t,n,e){const r=$(t);return"Io"===n?e.ordinalNumber(r,{unit:"week"}):V(r,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getDate(),{unit:"date"}):K.d(t,n)},D:function(t,n,e){const r=G(t);return"Do"===n?e.ordinalNumber(r,{unit:"dayOfYear"}):V(r,n.length)},E:function(t,n,e){const r=t.getDay();switch(n){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(t,n,e,r){const a=t.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(o);case"ee":return V(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(t,n,e,r){const a=t.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(o);case"cc":return V(o,n.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(t,n,e){const r=t.getDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return V(a,n.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(t,n,e){const r=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,n,e){const r=t.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,n,e){const r=t.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(a,{width:"narrow",context:"formatting"});default:return e.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){let n=t.getHours()%12;return 0===n&&(n=12),e.ordinalNumber(n,{unit:"hour"})}return K.h(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getHours(),{unit:"hour"}):K.H(t,n)},K:function(t,n,e){const r=t.getHours()%12;return"Ko"===n?e.ordinalNumber(r,{unit:"hour"}):V(r,n.length)},k:function(t,n,e){let r=t.getHours();return 0===r&&(r=24),"ko"===n?e.ordinalNumber(r,{unit:"hour"}):V(r,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getMinutes(),{unit:"minute"}):K.m(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getSeconds(),{unit:"second"}):K.s(t,n)},S:function(t,n){return K.S(t,n)},X:function(t,n,e,r){const a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return et(a);case"XXXX":case"XX":return rt(a);default:return rt(a,":")}},x:function(t,n,e,r){const a=(r._originalDate||t).getTimezoneOffset();switch(n){case"x":return et(a);case"xxxx":case"xx":return rt(a);default:return rt(a,":")}},O:function(t,n,e,r){const a=(r._originalDate||t).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+nt(a,":");default:return"GMT"+rt(a,":")}},z:function(t,n,e,r){const a=(r._originalDate||t).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+nt(a,":");default:return"GMT"+rt(a,":")}},t:function(t,n,e,r){const a=r._originalDate||t;return V(Math.floor(a.getTime()/1e3),n.length)},T:function(t,n,e,r){return V((r._originalDate||t).getTime(),n.length)}};function nt(t,n=""){const e=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;return 0===o?e+String(a):e+String(a)+n+V(o,2)}function et(t,n){return t%60==0?(t>0?"-":"+")+V(Math.abs(t)/60,2):rt(t,n)}function rt(t,n=""){const e=t>0?"-":"+",r=Math.abs(t);return e+V(Math.floor(r/60),2)+n+V(r%60,2)}const at=(t,n)=>{switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},ot=(t,n)=>{switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},it={p:ot,P:(t,n)=>{const e=t.match(/(P+)(p+)?/)||[],r=e[1],a=e[2];if(!a)return at(t,n);let o;switch(r){case"P":o=n.dateTime({width:"short"});break;case"PP":o=n.dateTime({width:"medium"});break;case"PPP":o=n.dateTime({width:"long"});break;default:o=n.dateTime({width:"full"})}return o.replace("{{date}}",at(r,n)).replace("{{time}}",ot(a,n))}},st=["D","DD"],ct=["YY","YYYY"];function ut(t,n,e){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${n}\`) for formatting years to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${n}\`) for formatting years to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${n}\`) for formatting days of the month to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${n}\`) for formatting days of the month to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const dt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,lt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ht=/^'([^]*?)'?$/,ft=/''/g,At=/[a-zA-Z]/;function mt(t,n,e){const r=q(),a=e?.locale??r.locale??F,o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=M(t);if(!S(s))throw new RangeError("Invalid time value");const c={firstWeekContainsDate:o,weekStartsOn:i,locale:a,_originalDate:s};return n.match(lt).map((function(t){const n=t[0];return"p"===n||"P"===n?(0,it[n])(t,a.formatLong):t})).join("").match(dt).map((function(r){if("''"===r)return"'";const o=r[0];if("'"===o)return function(t){const n=t.match(ht);return n?n[1].replace(ft,"'"):t}(r);const i=tt[o];if(i)return e?.useAdditionalWeekYearTokens||(u=r,-1===ct.indexOf(u))||ut(r,n,String(t)),!e?.useAdditionalDayOfYearTokens&&function(t){return-1!==st.indexOf(t)}(r)&&ut(r,n,String(t)),i(s,r,a.localize,c);var u;if(o.match(At))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}var gt=e(667);function pt(t,n,e,r,a){var o=e<r-1,i=e>a;t.disabled=!o,n.disabled=!i}function yt(t,n,e,r,a,o){var i=r/a,s=0,c=100*i;return e.style.width="".concat(c,"%"),o&&(e.style.gridAutoColumns="".concat(c/r,"%")),t.addEventListener("click",(function(){s<i-1&&(s+=1,e.style.right="".concat(100*s,"%")),pt(t,n,s,i,0)})),n.addEventListener("click",(function(){s>0&&(s-=1,e.style.right="".concat(100*s,"%")),pt(t,n,s,i,0)})),pt(t,n,s,i,0),{changeCPS:function(a){c=100*(i=r/a),e.style.width="".concat(c,"%"),o&&(e.style.gridAutoColumns="".concat(c/r,"%")),pt(t,n,s,i,0)},getCurrSlide:function(){return s}}}function wt(t){var n=parseInt(t.slice(1),16);return{r:n>>16&255,g:n>>8&255,b:255&n}}function bt(t,n,e){var r=function(t){return"0".concat(t.toString(16)).slice(-2)};return"#".concat(r(t)).concat(r(n)).concat(r(e))}var vt="#08415C",Ct="#ab386f";const Bt=function(t){var n=function(t){var n=t<65,e=n?"#3993DD":"#F6AF65",r=n?vt:Ct,a=wt(n?vt:Ct),o=wt("#F6AF65"),i=Math.round(a.r+(o.r-a.r)*(t/100)),s=Math.round(a.g+(o.g-a.g)*(t/100)),c=Math.round(a.b+(o.b-a.b)*(t/100));return{start:bt(a.r,a.g,a.b),end:bt(i,s,c),bar:e,text:r}}(t);document.body.style.background="linear-gradient(to bottom, ".concat(n.start,", ").concat(n.end,")"),document.querySelectorAll(".temp-bar").forEach((function(t){console.log(t),t.style.background=n.bar,t.style.color=n.text}))};function It(t){return It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},It(t)}function xt(){xt=function(){return n};var t,n={},e=Object.prototype,r=e.hasOwnProperty,a=Object.defineProperty||function(t,n,e){t[n]=e.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{u({},"")}catch(t){u=function(t,n,e){return t[n]=e}}function d(t,n,e,r){var o=n&&n.prototype instanceof p?n:p,i=Object.create(o.prototype),s=new D(r||[]);return a(i,"_invoke",{value:k(t,e,s)}),i}function l(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}n.wrap=d;var h="suspendedStart",f="suspendedYield",A="executing",m="completed",g={};function p(){}function y(){}function w(){}var b={};u(b,i,(function(){return this}));var v=Object.getPrototypeOf,C=v&&v(v(T([])));C&&C!==e&&r.call(C,i)&&(b=C);var B=w.prototype=p.prototype=Object.create(b);function I(t){["next","throw","return"].forEach((function(n){u(t,n,(function(t){return this._invoke(n,t)}))}))}function x(t,n){function e(a,o,i,s){var c=l(t[a],t,o);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==It(d)&&r.call(d,"__await")?n.resolve(d.__await).then((function(t){e("next",t,i,s)}),(function(t){e("throw",t,i,s)})):n.resolve(d).then((function(t){u.value=t,i(u)}),(function(t){return e("throw",t,i,s)}))}s(c.arg)}var o;a(this,"_invoke",{value:function(t,r){function a(){return new n((function(n,a){e(t,r,n,a)}))}return o=o?o.then(a,a):a()}})}function k(n,e,r){var a=h;return function(o,i){if(a===A)throw new Error("Generator is already running");if(a===m){if("throw"===o)throw i;return{value:t,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var c=E(s,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===h)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=A;var u=l(n,e,r);if("normal"===u.type){if(a=r.done?m:f,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(a=m,r.method="throw",r.arg=u.arg)}}}function E(n,e){var r=e.method,a=n.iterator[r];if(a===t)return e.delegate=null,"throw"===r&&n.iterator.return&&(e.method="return",e.arg=t,E(n,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=l(a,n.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,g;var i=o.arg;return i?i.done?(e[n.resultName]=i.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,g):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function M(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function S(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function D(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function T(n){if(n||""===n){var e=n[i];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var a=-1,o=function e(){for(;++a<n.length;)if(r.call(n,a))return e.value=n[a],e.done=!1,e;return e.value=t,e.done=!0,e};return o.next=o}}throw new TypeError(It(n)+" is not iterable")}return y.prototype=w,a(B,"constructor",{value:w,configurable:!0}),a(w,"constructor",{value:y,configurable:!0}),y.displayName=u(w,c,"GeneratorFunction"),n.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===y||"GeneratorFunction"===(n.displayName||n.name))},n.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(B),t},n.awrap=function(t){return{__await:t}},I(x.prototype),u(x.prototype,s,(function(){return this})),n.AsyncIterator=x,n.async=function(t,e,r,a,o){void 0===o&&(o=Promise);var i=new x(d(t,e,r,a),o);return n.isGeneratorFunction(e)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},I(B),u(B,c,"Generator"),u(B,i,(function(){return this})),u(B,"toString",(function(){return"[object Generator]"})),n.keys=function(t){var n=Object(t),e=[];for(var r in n)e.push(r);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=T,D.prototype={constructor:D,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(S),!n)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function a(r,a){return s.type="throw",s.arg=n,e.next=r,a&&(e.method="next",e.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var a=this.tryEntries[e];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=t,i.arg=n,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),g},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),S(e),g}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var a=r.arg;S(e)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,r){return this.delegate={iterator:T(n),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=t),g}},n}function kt(t,n,e,r,a,o,i){try{var s=t[o](i),c=s.value}catch(t){return void e(t)}s.done?n(c):Promise.resolve(c).then(r,a)}function Et(t){return function(){var n=this,e=arguments;return new Promise((function(r,a){var o=t.apply(n,e);function i(t){kt(o,r,a,i,s,"next",t)}function s(t){kt(o,r,a,i,s,"throw",t)}i(void 0)}))}}var Mt="acb745e75bc74a35bd612350232312",St=null;function Dt(t){return Tt.apply(this,arguments)}function Tt(){return(Tt=Et(xt().mark((function t(n){var e,r,a,o,i,s,c,u,d,l,h,f,A,m,g,p,y,b,v,C;return xt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("http://api.weatherapi.com/v1/forecast.json?key=".concat(Mt,"&q=").concat(n,"&days=3&aqi=no&alerts=no"),{mode:"cors"});case 3:return e=t.sent,t.next=6,e.json();case 6:for(r=t.sent,a=r.forecast.forecastday,o=[],i=0;i<a.length;i+=1){for(s=a[i],c=s.date,u=s.day.condition.text,d=s.day.avgtemp_f,l=s.day.daily_chance_of_rain,h=s.day.daily_chance_of_snow,f=s.day.condition.icon,A=f.replace("//cdn.weatherapi.com","."),m=[],g=0;g<s.hour.length;g+=1)p=s.hour[g].time,y=w(p),b=s.hour[g].condition.icon,v=b.replace("//cdn.weatherapi.com","."),C={time:mt(y,"h:mm a"),tempF:s.hour[g].temp_f,condition:s.hour[g].condition.text,iconLink:v},m.push(C);o.push({date:c,avgTempF:d,condition:u,rainChance:l,snowChance:h,hourlyData:m,iconLink:A})}return console.log(o),t.abrupt("return",o);case 14:if(t.prev=14,t.t0=t.catch(0),"TypeError"!==t.t0.name){t.next=18;break}return t.abrupt("return",null);case 18:return t.abrupt("return",t.t0);case 19:case"end":return t.stop()}}),t,null,[[0,14]])})))).apply(this,arguments)}function Wt(t,n,e,r,a){var o=(0,gt.Sy)(".card"),i=(0,gt.Sy)(".temp-bar",o);i.style.height="".concat(r,"%"),(0,gt.Sy)(".temp-display",i).textContent="".concat(t,"°"),(0,gt.Sy)(".time",o).textContent=n;var s=(0,gt.Sy)("img.condition-icon",o);return s.src=a,s.alt=e,o}function Nt(t){var n=St[t],e=(0,gt.IO)(".todays-stats .condition-icon"),r=n.iconLink;e.src=r,(0,gt.IO)(".todays-stats .temp-display").textContent="".concat(n.avgTempF,"°"),(0,gt.IO)(".todays-stats .condition-text").textContent="".concat(n.condition,".");var a=(0,gt.IO)(".todays-stats .rain-chancer");a.textContent="".concat(n.rainChance,"%"),a.style.background="radial-gradient(closest-side, #2b303aff 85%, transparent 80% 100%), conic-gradient(rgb(96, 192, 214) ".concat(n.rainChance,"%, rgba(171, 172, 171, 0.33) 0)");var o=(0,gt.IO)(".todays-stats .snow-chancer");o.textContent="".concat(n.snowChance,"%"),o.style.background="radial-gradient(closest-side, #2b303aff 85%, transparent 80% 100%), conic-gradient(rgb(251, 159, 215) ".concat(n.snowChance,"%, rgba(171, 172, 171, 0.33) 0)"),function(t){var n=(0,gt.IO)("main .slider-board");n.textContent="";for(var e=St[t],r=e.hourlyData.reduce((function(t,n){return n.tempF>t?n.tempF:t}),0),a=0;a<e.hourlyData.length;a+=1){var o=e.hourlyData[a],i=o.tempF/r*100;i=i<15?15:i;var s=Wt(o.tempF,o.time,o.condition,i,o.iconLink);console.log(o.iconLink),n.append(s)}}(t),Bt(n.avgTempF)}var Ot=0;Dt("Hell").then((function(t){var n,e,r,a,o,i,s,c,u;St=t,n=(0,gt.IO)(".day-changer"),e=(0,gt.IO)(".slider",n),r=(0,gt.IO)(".left.arrow",n),a=(0,gt.IO)(".right.arrow",n),o=yt(a,r,e,3,1,!1),i=function(){var t=o.getCurrSlide();Nt(t),Ot=t},r.addEventListener("click",i),a.addEventListener("click",i),yt((0,gt.IO)(".carousel .right.arrow"),(0,gt.IO)(".carousel .left.arrow"),(0,gt.IO)(".carousel .slider-board"),24,12,!0),s=(0,gt.IO)("#search"),c=(0,gt.IO)("#search + .error"),u="Hell",s.value="Hell",s.addEventListener("keydown",function(){var t=Et(xt().mark((function t(n){var e;return xt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,"Enter"!==n.key){t.next=7;break}return e=St,t.next=5,Dt(s.value);case 5:null===(St=t.sent)?(St=e,s.value=u,s.setCustomValidity("No such city!"),c.textContent="No such city!"):(s.setCustomValidity(""),c.textContent="",Nt(Ot),u=s.value);case 7:t.next=12;break;case 9:t.prev=9,t.t0=t.catch(0),console.error(t.t0);case 12:case"end":return t.stop()}}),t,null,[[0,9]])})));return function(n){return t.apply(this,arguments)}}()),Nt(0)})).catch((function(t){return console.error(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFqRyxPQUFBLEdBQUE4RixFQUFBLGtCQUUxQixnQkFBQUssR0FBQSxPQUFBTixFQUFBN2lCLE1BQUEsS0FBQWdlLFVBQUEsRUFyQmtDLElBK0IvQm9ELEdBQVksRUFDaEIsSUFDQy9ELE9BQU0sU0FBQ1ksR0FBRyxPQUFLaGlCLFFBQVFDLE1BQU0raEIsRUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvamVmZi1xdWVyeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvY29uc3RhbnRzLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvcGFyc2VJU08ubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy90b0RhdGUubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1ZhbGlkLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNEYXRlLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9kZWZhdWx0T3B0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZEYXkubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb25zdHJ1Y3RGcm9tLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0RGF5T2ZZZWFyLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZlllYXIubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vlay5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0SVNPV2Vla1llYXIubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZklTT1dlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0V2Vla1llYXIubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZldlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9hZGRMZWFkaW5nWmVyb3MubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMubWpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3Byb3RlY3RlZFRva2Vucy5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdC5tanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL3NsaWRlci5qcyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvYmFja2dyYWRpZW50ZXIuanMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdCB7XG4gICAgLS1wcmltYXJ5OiAjNTE5ODcyZmY7XG4gICAgLS1wcmltYXJ5LWxpZ2h0ZXI6ICMwOWJjOGFmZjtcbiAgICAtLXNlY29uZGFyeTogIzExOGFiMmZmO1xuXG4gICAgLS1uZXV0cmFsLWRhcms6ICMyYjMwM2FmZjtcbiAgICAtLW5ldXRyYWwtbWlkOiByZ2IoMTI3LCAxMzEsIDEzNik7XG4gICAgLS1uZXV0cmFsLWxpZ2h0OiAjZWJlYmViZmY7XG5cbiAgICAtLXNlbWFudGljLWJhZDogcmdiKDIwNywgNzgsIDEwMCk7XG4gICAgLS1zZW1hbnRpYy1nb29kOiAjMzdGRjhCZmY7ICAgXG59XG5cbmh0bWwgeyBcbiAgICBmb250LWZhbWlseTogSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBjb2xvcjogdmFyKC0tbmV1dHJhbC1saWdodCk7XG59XG5cbmJvZHkgeyBcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbioge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xufVxuXG5idXR0b24sIGlucHV0LCBsYWJlbCB7XG4gICAgYm94LXNpemluZzpjb250ZW50LWJveDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDsgXG4gICAgZm9udC1zaXplOiBpbmhlcml0O1xuICAgIGNvbG9yOiBpbmhlcml0O1xuXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5idXR0b246YWN0aXZlLCBpbnB1dDphY3RpdmUsIGxhYmVsOmFjdGl2ZXtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbjp3aGVyZSh0ZXh0YXJlYSksXG46d2hlcmUoaW5wdXRbdHlwZT1cInRleHRcIl0sIGlucHV0W3R5cGU9XCJzZWFyY2hcIl0sIGlucHV0W3R5cGU9XCJwYXNzd29yZFwiXSwgaW5wdXRbdHlwZT1cInVybFwiXSl7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIG91dGxpbmU6IG5vbmU7XG59IFxuXG4vKiBpbnB1dDo6cGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWZhZGUpO1xuICAgIGNvbG9yLXNjaGVtZTogdmFyKC0tcHJpbWFyeS1mYWRlKTtcbn0gKi9cblxudWwge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbnN2ZyB7XG4gICAgd2lkdGg6IDMwcHg7XG4gICAgZmlsbDogdmFyKC0tbmV1dHJhbC1saWdodCk7XG59XG5cbmEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogaW5oZXJpdDtcbn1cblxuLmhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogQWN0dWFsIGN1c3RvbSBzdHlsaW5nIHRoaW5ncyBiZWxvdyAqLyBcbmh0bWwge1xuICAgIGhlaWdodDogMTAwJTtcbn1cblxuYm9keSB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xufVxuXG4vKiBoZWFkZXIgc3R1ZmYgKi8gXG5oZWFkZXIge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcbiAgICBwYWRkaW5nOiAxNXB4IDQwcHg7XG4gICAgZ2FwOiAyMHB4O1xufVxuXG4uZGF5LWNoYW5nZXIge1xuICAgIC0tZGF5LWVudHJ5LXdpZHRoOiAxODBweDsgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IDEwcHg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogdmFyKC0tZGF5LWVudHJ5LXdpZHRoKTtcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uZGF5LWNoYW5nZXIgLnNsaWRlciB7XG4gICAgd2lkdGg6IDMwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICByaWdodDogMDtcbn1cblxuLmRheS1jaGFuZ2VyIC5zbGlkZXIgc3BhbiB7XG4gICAgd2lkdGg6IHZhcigtLWRheS1lbnRyeS13aWR0aCk7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5oZWFkZXIgLmRheS1jaGFuZ2VyIC5hcnJvdyB7XG4gICAgdG9wOiA4JTtcbiAgICB3aWR0aDogMzBweDtcbiAgICBtYXJnaW46IDAgMzBweDtcbn1cblxuLnRvZGF5cy1zdGF0cyB7XG4gICAgZ3JpZC1yb3c6IDEgLyAzO1xuICAgIGdyaWQtY29sdW1uOiAyIC8gMztcblxuICAgIGp1c3RpZnktc2VsZjogcmlnaHQ7XG4gICAgd2lkdGg6IDcwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG59XG5cbi50b2RheXMtc3RhdHMgLmNvbmRpdGlvbi1pY29uIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG59XG5cbi5zZWFyY2gtaG9sZGVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDUwJTtcbn1cblxuI3NlYXJjaCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZm9udC1zaXplOiAxLjVyZW07XG59XG5cbiNzZWFyY2g6aW52YWxpZCB7XG4gICAgYm9yZGVyOiB2YXIoLS1zZW1hbnRpYy1iYWQpO1xufVxuXG4uc2VhcmNoLWhvbGRlciAuZXJyb3Ige1xuICAgIGZvbnQtc2l6ZTogMC43cmVtO1xuICAgIGNvbG9yOiB2YXIoLS1zZW1hbnRpYy1iYWQpO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IC0xNnB4O1xufVxuXG4ucmFpbi1jaGFuY2VyLCAuc25vdy1jaGFuY2VyIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5yYWluLWNoYW5jZXI6aG92ZXI6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnQ2hhbmNlIG9mIHJhaW4nO1xuICAgIGZvbnQtc2l6ZTogMC43cmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDExMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4uc25vdy1jaGFuY2VyOmhvdmVyOjphZnRlciB7XG4gICAgY29udGVudDogJ0NoYW5jZSBvZiBzbm93JztcbiAgICBmb250LXNpemU6IDAuN3JlbTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxMTAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLyogTWFpbiBzZWN0aW9uICovXG5tYWluIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogZW5kO1xuXG4gICAgcGFkZGluZzogMjBweCA0MHB4O1xufVxuXG4uY2Fyb3VzZWwge1xuICAgIHdpZHRoOiAxMDAlOyBcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uc2xpZGVyLWZyYW1lIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cblxuLmFycm93IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG5cbi5hcnJvdzpkaXNhYmxlZCBzdmcge1xuICAgIGZpbGw6IHZhcigtLW5ldXRyYWwtbWlkKTtcbn1cblxuLmxlZnQuYXJyb3cge1xuICAgIGxlZnQ6IC0yMnB4O1xuICAgIHRvcDogNDAlO1xufVxuLnJpZ2h0LmFycm93IHtcbiAgICByaWdodDogLTIycHg7XG4gICAgdG9wOiA0MCVcbn1cblxuLnNsaWRlci1ib2FyZCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuXG4gICAgLyogd2lkdGg6IDIwMCU7XG4gICAgZ3JpZC1hdXRvLWNvbHVtbnM6IGNhbGMoMjAwJSAvIDEyKTsgKi9cblxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICByaWdodDogMDtcbiAgICB0cmFuc2l0aW9uOiByaWdodCAwLjNzIGxpbmVhcjtcbn1cblxuLmNhcmQge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA4MCUgYXV0byBhdXRvO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogMCAxMnB4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbi5jYXJkIC50ZW1wLWJhciB7XG4gICAgYWxpZ24tc2VsZjogc2VsZi1lbmQ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIC0tdG9wLXJhZGl1czogMTZweDsgXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IHZhcigtLXRvcC1yYWRpdXMpO1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IHZhcigtLXRvcC1yYWRpdXMpO1xuXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBwYWRkaW5nLXRvcDogMjAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5jYXJkIC50ZW1wLWRpc3BsYXkge1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xufVxuXG4uY2FyZCAuY29uZGl0aW9uLWljb24ge1xuICAgIHdpZHRoOiA1MCU7XG59XG5cbi5jb25kaXRpb24taWNvbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmV1dHJhbC1kYXJrKTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcGFkZGluZzogM3B4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLG9CQUFvQjtJQUNwQiw0QkFBNEI7SUFDNUIsc0JBQXNCOztJQUV0Qix5QkFBeUI7SUFDekIsaUNBQWlDO0lBQ2pDLDBCQUEwQjs7SUFFMUIsaUNBQWlDO0lBQ2pDLDBCQUEwQjtBQUM5Qjs7QUFFQTtJQUNJLGtDQUFrQztJQUNsQyxlQUFlO0lBQ2YsMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFVBQVU7SUFDVixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLHlCQUF5QjtJQUN6QixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLGNBQWM7O0lBRWQsZUFBZTtJQUNmLGNBQWM7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OztBQUVBO0lBQ0kscUNBQXFDO0lBQ3JDLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osc0JBQXNCO0FBQzFCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gICAgLS1wcmltYXJ5OiAjNTE5ODcyZmY7XFxuICAgIC0tcHJpbWFyeS1saWdodGVyOiAjMDliYzhhZmY7XFxuICAgIC0tc2Vjb25kYXJ5OiAjMTE4YWIyZmY7XFxuXFxuICAgIC0tbmV1dHJhbC1kYXJrOiAjMmIzMDNhZmY7XFxuICAgIC0tbmV1dHJhbC1taWQ6IHJnYigxMjcsIDEzMSwgMTM2KTtcXG4gICAgLS1uZXV0cmFsLWxpZ2h0OiAjZWJlYmViZmY7XFxuXFxuICAgIC0tc2VtYW50aWMtYmFkOiByZ2IoMjA3LCA3OCwgMTAwKTtcXG4gICAgLS1zZW1hbnRpYy1nb29kOiAjMzdGRjhCZmY7ICAgXFxufVxcblxcbmh0bWwgeyBcXG4gICAgZm9udC1mYW1pbHk6IEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICBjb2xvcjogdmFyKC0tbmV1dHJhbC1saWdodCk7XFxufVxcblxcbmJvZHkgeyBcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4qIHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5cXG5idXR0b24sIGlucHV0LCBsYWJlbCB7XFxuICAgIGJveC1zaXppbmc6Y29udGVudC1ib3g7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IFxcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XFxuICAgIGNvbG9yOiBpbmhlcml0O1xcblxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5idXR0b246YWN0aXZlLCBpbnB1dDphY3RpdmUsIGxhYmVsOmFjdGl2ZXtcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG46d2hlcmUodGV4dGFyZWEpLFxcbjp3aGVyZShpbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0sIGlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdLCBpbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdLCBpbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXSl7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gIG91dGxpbmU6IG5vbmU7XFxufSBcXG5cXG4vKiBpbnB1dDo6cGxhY2Vob2xkZXIge1xcbiAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1mYWRlKTtcXG4gICAgY29sb3Itc2NoZW1lOiB2YXIoLS1wcmltYXJ5LWZhZGUpO1xcbn0gKi9cXG5cXG51bCB7XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbnN2ZyB7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBmaWxsOiB2YXIoLS1uZXV0cmFsLWxpZ2h0KTtcXG59XFxuXFxuYSB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4vKiBBY3R1YWwgY3VzdG9tIHN0eWxpbmcgdGhpbmdzIGJlbG93ICovIFxcbmh0bWwge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbmJvZHkge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xcbn1cXG5cXG4vKiBoZWFkZXIgc3R1ZmYgKi8gXFxuaGVhZGVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxuICAgIHBhZGRpbmc6IDE1cHggNDBweDtcXG4gICAgZ2FwOiAyMHB4O1xcbn1cXG5cXG4uZGF5LWNoYW5nZXIge1xcbiAgICAtLWRheS1lbnRyeS13aWR0aDogMTgwcHg7IFxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDEwcHg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHdpZHRoOiB2YXIoLS1kYXktZW50cnktd2lkdGgpO1xcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmRheS1jaGFuZ2VyIC5zbGlkZXIge1xcbiAgICB3aWR0aDogMzAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICByaWdodDogMDtcXG59XFxuXFxuLmRheS1jaGFuZ2VyIC5zbGlkZXIgc3BhbiB7XFxuICAgIHdpZHRoOiB2YXIoLS1kYXktZW50cnktd2lkdGgpO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5oZWFkZXIgLmRheS1jaGFuZ2VyIC5hcnJvdyB7XFxuICAgIHRvcDogOCU7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBtYXJnaW46IDAgMzBweDtcXG59XFxuXFxuLnRvZGF5cy1zdGF0cyB7XFxuICAgIGdyaWQtcm93OiAxIC8gMztcXG4gICAgZ3JpZC1jb2x1bW46IDIgLyAzO1xcblxcbiAgICBqdXN0aWZ5LXNlbGY6IHJpZ2h0O1xcbiAgICB3aWR0aDogNzAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxufVxcblxcbi50b2RheXMtc3RhdHMgLmNvbmRpdGlvbi1pY29uIHtcXG4gICAgd2lkdGg6IDYwcHg7XFxuICAgIGhlaWdodDogNjBweDtcXG59XFxuXFxuLnNlYXJjaC1ob2xkZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHdpZHRoOiA1MCU7XFxufVxcblxcbiNzZWFyY2gge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcblxcbiNzZWFyY2g6aW52YWxpZCB7XFxuICAgIGJvcmRlcjogdmFyKC0tc2VtYW50aWMtYmFkKTtcXG59XFxuXFxuLnNlYXJjaC1ob2xkZXIgLmVycm9yIHtcXG4gICAgZm9udC1zaXplOiAwLjdyZW07XFxuICAgIGNvbG9yOiB2YXIoLS1zZW1hbnRpYy1iYWQpO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJvdHRvbTogLTE2cHg7XFxufVxcblxcbi5yYWluLWNoYW5jZXIsIC5zbm93LWNoYW5jZXIge1xcbiAgICB3aWR0aDogNjBweDtcXG4gICAgaGVpZ2h0OiA2MHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5yYWluLWNoYW5jZXI6aG92ZXI6OmFmdGVyIHtcXG4gICAgY29udGVudDogJ0NoYW5jZSBvZiByYWluJztcXG4gICAgZm9udC1zaXplOiAwLjdyZW07XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAxMTAlO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uc25vdy1jaGFuY2VyOmhvdmVyOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICdDaGFuY2Ugb2Ygc25vdyc7XFxuICAgIGZvbnQtc2l6ZTogMC43cmVtO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMTEwJTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLyogTWFpbiBzZWN0aW9uICovXFxubWFpbiB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGVuZDtcXG5cXG4gICAgcGFkZGluZzogMjBweCA0MHB4O1xcbn1cXG5cXG4uY2Fyb3VzZWwge1xcbiAgICB3aWR0aDogMTAwJTsgXFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uc2xpZGVyLWZyYW1lIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG5cXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbn1cXG5cXG4uYXJyb3cge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5hcnJvdzpkaXNhYmxlZCBzdmcge1xcbiAgICBmaWxsOiB2YXIoLS1uZXV0cmFsLW1pZCk7XFxufVxcblxcbi5sZWZ0LmFycm93IHtcXG4gICAgbGVmdDogLTIycHg7XFxuICAgIHRvcDogNDAlO1xcbn1cXG4ucmlnaHQuYXJyb3cge1xcbiAgICByaWdodDogLTIycHg7XFxuICAgIHRvcDogNDAlXFxufVxcblxcbi5zbGlkZXItYm9hcmQge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG5cXG4gICAgLyogd2lkdGg6IDIwMCU7XFxuICAgIGdyaWQtYXV0by1jb2x1bW5zOiBjYWxjKDIwMCUgLyAxMik7ICovXFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHRyYW5zaXRpb246IHJpZ2h0IDAuM3MgbGluZWFyO1xcbn1cXG5cXG4uY2FyZCB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogODAlIGF1dG8gYXV0bztcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBtYXJnaW46IDAgMTJweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmNhcmQgLnRlbXAtYmFyIHtcXG4gICAgYWxpZ24tc2VsZjogc2VsZi1lbmQ7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgLS10b3AtcmFkaXVzOiAxNnB4OyBcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IHZhcigtLXRvcC1yYWRpdXMpO1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiB2YXIoLS10b3AtcmFkaXVzKTtcXG5cXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZy10b3A6IDIwJTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5jYXJkIC50ZW1wLWRpc3BsYXkge1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLmNhcmQgLmNvbmRpdGlvbi1pY29uIHtcXG4gICAgd2lkdGg6IDUwJTtcXG59XFxuXFxuLmNvbmRpdGlvbi1pY29uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbmV1dHJhbC1kYXJrKTtcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgICBwYWRkaW5nOiAzcHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLy8gRG9tIG1hbmlwdWxhdGlvbiBcbmZ1bmN0aW9uIHF1ZXJ5KHNlbGVjdG9yLCBwYXJlbnQ9ZG9jdW1lbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5QWxsKHNlbGVjdG9yLCBwYXJlbnQ9ZG9jdW1lbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRTZXBhcmF0b3Ioc3RhcnQsIHNlbGVjdG9yKXtcbiAgICBjb25zdCBuZXh0SGFzaCA9IHNlbGVjdG9yLmluZGV4T2YoJyMnLCBzdGFydCk7XG4gICAgY29uc3QgbmV4dERvdCA9IHNlbGVjdG9yLmluZGV4T2YoJy4nLCBzdGFydCk7XG5cbiAgICBpZiAobmV4dEhhc2ggPT09IC0xKXtcbiAgICAgICAgcmV0dXJuIG5leHREb3Q7XG4gICAgfSBlbHNlIGlmIChuZXh0RG90ID09PSAtMSl7XG4gICAgICAgIHJldHVybiBuZXh0SGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIChuZXh0SGFzaCA+IG5leHREb3QpID8gbmV4dERvdCA6IG5leHRIYXNoO1xufVxuXG5mdW5jdGlvbiBtYWtlKHNlbGVjdG9yLCBwYXJlbnQpe1xuICAgIGxldCBsYXN0SW5kID0gZ2V0TmV4dFNlcGFyYXRvcigwLCBzZWxlY3Rvcik7XG4gICAgXG4gICAgY29uc3QgY29ycmVjdGVkTGFzdEluZCA9IChsYXN0SW5kID4gLTEpID8gbGFzdEluZCA6IHNlbGVjdG9yLmxlbmd0aDtcbiAgICBjb25zdCB0eXBlTmFtZSA9IHNlbGVjdG9yLnNsaWNlKDAsIGNvcnJlY3RlZExhc3RJbmQpO1xuICAgIGNvbnN0IHR5cGUgPSAodHlwZU5hbWUubGVuZ3RoID09PSAwKSA/ICdkaXYnIDogdHlwZU5hbWU7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgbGV0IGlkO1xuICAgIHdoaWxlIChsYXN0SW5kID4gLTEpe1xuICAgICAgICBjb25zdCBpbmQgPSBnZXROZXh0U2VwYXJhdG9yKGxhc3RJbmQrMSwgc2VsZWN0b3IpO1xuICAgICAgICBjb25zdCBjb3JyZWN0ZWRJbmQgPSAoaW5kID4gLTEpID8gaW5kIDogc2VsZWN0b3IubGVuZ3RoO1xuICAgICAgICBjb25zdCBzdWJTdHIgPSBzZWxlY3Rvci5zbGljZShsYXN0SW5kKzEsIGNvcnJlY3RlZEluZCk7XG5cbiAgICAgICAgaWYgKHN1YlN0ci5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcignVXNhZ2UgZXJyb3I6IFRyaWVkIHRvIHVzZSB0d28gc3ltYm9scyBmb3IgY2xhc3MgYW5kL29yIGlkIGluIGEgcm93LicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN5bSA9IHNlbGVjdG9yLmF0KGxhc3RJbmQpO1xuICAgICAgICBpZiAoc3ltID09PSAnLicpe1xuICAgICAgICAgICAgY2xhc3Nlcy51bnNoaWZ0KHN1YlN0cik7XG4gICAgICAgIH0gZWxzZSBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWQgPSBzdWJTdHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBjb25zb2xlLmVycm9yKFwiQXJndW1lbnQgZXJyb3I6IGVsZW1lbnRzIGNhbid0IGhhdmUgbXVsdGlwbGUgaWRzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEluZCA9IGluZDtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcbiAgICBmb3IgKGNvbnN0IGNsYXp6IG9mIGNsYXNzZXMpe1xuICAgICAgICBuZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhenopO1xuICAgIH1cbiAgICBpZiAoaWQpIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuYXBwZW5kKG5ld0VsZW1lbnQpO1xuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIFxufVxuXG5mdW5jdGlvbiBpbnNlcnRBZnRlcihyZWZlcmVuY2VOb2RlLCBuZXdOb2RlKSB7XG4gICAgcmVmZXJlbmNlTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlLm5leHRTaWJsaW5nKTtcbn1cblxuXG4vLyBleHBvcnQgc3RhdGVtZW50XG5leHBvcnRzLm1ha2UgPSBtYWtlO1xuZXhwb3J0cy5xdWVyeSA9IHF1ZXJ5O1xuZXhwb3J0cy5xdWVyeUFsbCA9IHF1ZXJ5QWxsO1xuZXhwb3J0cy5pbnNlcnRBZnRlciA9IGluc2VydEFmdGVyOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyoqXG4gKiBAbW9kdWxlIGNvbnN0YW50c1xuICogQHN1bW1hcnkgVXNlZnVsIGNvbnN0YW50c1xuICogQGRlc2NyaXB0aW9uXG4gKiBDb2xsZWN0aW9uIG9mIHVzZWZ1bCBkYXRlIGNvbnN0YW50cy5cbiAqXG4gKiBUaGUgY29uc3RhbnRzIGNvdWxkIGJlIGltcG9ydGVkIGZyb20gYGRhdGUtZm5zL2NvbnN0YW50c2A6XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IG1heFRpbWUsIG1pblRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogZnVuY3Rpb24gaXNBbGxvd2VkVGltZSh0aW1lKSB7XG4gKiAgIHJldHVybiB0aW1lIDw9IG1heFRpbWUgJiYgdGltZSA+PSBtaW5UaW1lO1xuICogfVxuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIGRheXNJbldlZWtcbiAqIEBzdW1tYXJ5IERheXMgaW4gMSB3ZWVrLlxuICovXG5leHBvcnQgY29uc3QgZGF5c0luV2VlayA9IDc7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBkYXlzSW5ZZWFyXG4gKiBAc3VtbWFyeSBEYXlzIGluIDEgeWVhci5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhvdyBtYW55IGRheXMgaW4gYSB5ZWFyLlxuICpcbiAqIE9uZSB5ZWFycyBlcXVhbHMgMzY1LjI0MjUgZGF5cyBhY2NvcmRpbmcgdG8gdGhlIGZvcm11bGE6XG4gKlxuICogPiBMZWFwIHllYXIgb2NjdXJlcyBldmVyeSA0IHllYXJzLCBleGNlcHQgZm9yIHllYXJzIHRoYXQgYXJlIGRpdmlzYWJsZSBieSAxMDAgYW5kIG5vdCBkaXZpc2FibGUgYnkgNDAwLlxuICogPiAxIG1lYW4geWVhciA9ICgzNjUrMS80LTEvMTAwKzEvNDAwKSBkYXlzID0gMzY1LjI0MjUgZGF5c1xuICovXG5leHBvcnQgY29uc3QgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWF4VGltZVxuICogQHN1bW1hcnkgTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IG1heFRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogY29uc3QgaXNWYWxpZCA9IDg2NDAwMDAwMDAwMDAwMDEgPD0gbWF4VGltZTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBuZXcgRGF0ZSg4NjQwMDAwMDAwMDAwMDAxKTtcbiAqIC8vPT4gSW52YWxpZCBEYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtYXhUaW1lID0gTWF0aC5wb3coMTAsIDgpICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBzdW1tYXJ5IE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGNvbnN0IGlzVmFsaWQgPSAtODY0MDAwMDAwMDAwMDAwMSA+PSBtaW5UaW1lO1xuICogLy89PiBmYWxzZVxuICpcbiAqIG5ldyBEYXRlKC04NjQwMDAwMDAwMDAwMDAxKVxuICogLy89PiBJbnZhbGlkIERhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pblRpbWUgPSAtbWF4VGltZTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luV2VlayA9IDYwNDgwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbkRheSA9IDg2NDAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5Ib3VyID0gMzYwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJblllYXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luWWVhciA9IDUyNTYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbk1vbnRoXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgbW9udGguXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5Nb250aCA9IDQzMjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luRGF5XG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luRGF5ID0gMTQ0MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBob3VyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luSG91ciA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAc3VtbWFyeSBNb250aHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3QgbW9udGhzSW5RdWFydGVyID0gMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQHN1bW1hcnkgTW9udGhzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1vbnRoc0luWWVhciA9IDEyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBzdW1tYXJ5IFF1YXJ0ZXJzIGluIDEgeWVhclxuICovXG5leHBvcnQgY29uc3QgcXVhcnRlcnNJblllYXIgPSA0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIGhvdXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1pbnV0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblllYXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Nb250aCA9IHNlY29uZHNJblllYXIgLyAxMjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luUXVhcnRlciA9IHNlY29uZHNJbk1vbnRoICogMztcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luSG91ciwgbWlsbGlzZWNvbmRzSW5NaW51dGUgfSBmcm9tIFwiLi9jb25zdGFudHMubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBwYXJzZUlTT30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHBhcnNlSVNPXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFBhcnNlIElTTyBzdHJpbmdcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBhcnNlIHRoZSBnaXZlbiBzdHJpbmcgaW4gSVNPIDg2MDEgZm9ybWF0IGFuZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cbiAqIElTTyA4NjAxOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzbid0IGEgc3RyaW5nLCB0aGUgZnVuY3Rpb24gY2Fubm90IHBhcnNlIHRoZSBzdHJpbmcgb3JcbiAqIHRoZSB2YWx1ZXMgYXJlIGludmFsaWQsIGl0IHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBhcmd1bWVudCAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnMjAxNC0wMi0xMVQxMTozMDozMCcgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHBhcnNlSVNPKCcyMDE0LTAyLTExVDExOjMwOjMwJylcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcrMDIwMTQxMDEnIHRvIGRhdGUsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVNPKGFyZ3VtZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IGFkZGl0aW9uYWxEaWdpdHMgPSBvcHRpb25zPy5hZGRpdGlvbmFsRGlnaXRzID8/IDI7XG4gIGNvbnN0IGRhdGVTdHJpbmdzID0gc3BsaXREYXRlU3RyaW5nKGFyZ3VtZW50KTtcblxuICBsZXQgZGF0ZTtcbiAgaWYgKGRhdGVTdHJpbmdzLmRhdGUpIHtcbiAgICBjb25zdCBwYXJzZVllYXJSZXN1bHQgPSBwYXJzZVllYXIoZGF0ZVN0cmluZ3MuZGF0ZSwgYWRkaXRpb25hbERpZ2l0cyk7XG4gICAgZGF0ZSA9IHBhcnNlRGF0ZShwYXJzZVllYXJSZXN1bHQucmVzdERhdGVTdHJpbmcsIHBhcnNlWWVhclJlc3VsdC55ZWFyKTtcbiAgfVxuXG4gIGlmICghZGF0ZSB8fCBpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBsZXQgdGltZSA9IDA7XG4gIGxldCBvZmZzZXQ7XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWUpIHtcbiAgICB0aW1lID0gcGFyc2VUaW1lKGRhdGVTdHJpbmdzLnRpbWUpO1xuICAgIGlmIChpc05hTih0aW1lKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSk7XG4gICAgaWYgKGlzTmFOKG9mZnNldCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkaXJ0eURhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKTtcbiAgICAvLyBKUyBwYXJzZWQgc3RyaW5nIGFzc3VtaW5nIGl0J3MgaW4gVVRDIHRpbWV6b25lXG4gICAgLy8gYnV0IHdlIG5lZWQgaXQgdG8gYmUgcGFyc2VkIGluIG91ciB0aW1lem9uZVxuICAgIC8vIHNvIHdlIHVzZSB1dGMgdmFsdWVzIHRvIGJ1aWxkIGRhdGUgaW4gb3VyIHRpbWV6b25lLlxuICAgIC8vIFllYXIgdmFsdWVzIGZyb20gMCB0byA5OSBtYXAgdG8gdGhlIHllYXJzIDE5MDAgdG8gMTk5OVxuICAgIC8vIHNvIHNldCB5ZWFyIGV4cGxpY2l0bHkgd2l0aCBzZXRGdWxsWWVhci5cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgRGF0ZSgwKTtcbiAgICByZXN1bHQuc2V0RnVsbFllYXIoXG4gICAgICBkaXJ0eURhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGRpcnR5RGF0ZS5nZXRVVENNb250aCgpLFxuICAgICAgZGlydHlEYXRlLmdldFVUQ0RhdGUoKSxcbiAgICApO1xuICAgIHJlc3VsdC5zZXRIb3VycyhcbiAgICAgIGRpcnR5RGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIGRpcnR5RGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICBkaXJ0eURhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCksXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpO1xufVxuXG5jb25zdCBwYXR0ZXJucyA9IHtcbiAgZGF0ZVRpbWVEZWxpbWl0ZXI6IC9bVCBdLyxcbiAgdGltZVpvbmVEZWxpbWl0ZXI6IC9bWiBdL2ksXG4gIHRpbWV6b25lOiAvKFtaKy1dLiopJC8sXG59O1xuXG5jb25zdCBkYXRlUmVnZXggPVxuICAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbmNvbnN0IHRpbWVSZWdleCA9XG4gIC9eKFxcZHsyfSg/OlsuLF1cXGQqKT8pKD86Oj8oXFxkezJ9KD86Wy4sXVxcZCopPykpPyg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8kLztcbmNvbnN0IHRpbWV6b25lUmVnZXggPSAvXihbKy1dKShcXGR7Mn0pKD86Oj8oXFxkezJ9KSk/JC87XG5cbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIGNvbnN0IGRhdGVTdHJpbmdzID0ge307XG4gIGNvbnN0IGFycmF5ID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy5kYXRlVGltZURlbGltaXRlcik7XG4gIGxldCB0aW1lU3RyaW5nO1xuXG4gIC8vIFRoZSByZWdleCBtYXRjaCBzaG91bGQgb25seSByZXR1cm4gYXQgbWF4aW11bSB0d28gYXJyYXkgZWxlbWVudHMuXG4gIC8vIFtkYXRlXSwgW3RpbWVdLCBvciBbZGF0ZSwgdGltZV0uXG4gIGlmIChhcnJheS5sZW5ndGggPiAyKSB7XG4gICAgcmV0dXJuIGRhdGVTdHJpbmdzO1xuICB9XG5cbiAgaWYgKC86Ly50ZXN0KGFycmF5WzBdKSkge1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVswXTtcbiAgfSBlbHNlIHtcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gYXJyYXlbMF07XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzFdO1xuICAgIGlmIChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlci50ZXN0KGRhdGVTdHJpbmdzLmRhdGUpKSB7XG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlcilbMF07XG4gICAgICB0aW1lU3RyaW5nID0gZGF0ZVN0cmluZy5zdWJzdHIoXG4gICAgICAgIGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLFxuICAgICAgICBkYXRlU3RyaW5nLmxlbmd0aCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICBjb25zdCB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lLmV4ZWModGltZVN0cmluZyk7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZy5yZXBsYWNlKHRva2VuWzFdLCBcIlwiKTtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRlU3RyaW5ncztcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGRhdGVTdHJpbmcsIGFkZGl0aW9uYWxEaWdpdHMpIHtcbiAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKFxuICAgIFwiXig/OihcXFxcZHs0fXxbKy1dXFxcXGR7XCIgK1xuICAgICAgKDQgKyBhZGRpdGlvbmFsRGlnaXRzKSArXG4gICAgICBcIn0pfChcXFxcZHsyfXxbKy1dXFxcXGR7XCIgK1xuICAgICAgKDIgKyBhZGRpdGlvbmFsRGlnaXRzKSArXG4gICAgICBcIn0pJClcIixcbiAgKTtcblxuICBjb25zdCBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2gocmVnZXgpO1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4geyB5ZWFyOiBOYU4sIHJlc3REYXRlU3RyaW5nOiBcIlwiIH07XG5cbiAgY29uc3QgeWVhciA9IGNhcHR1cmVzWzFdID8gcGFyc2VJbnQoY2FwdHVyZXNbMV0pIDogbnVsbDtcbiAgY29uc3QgY2VudHVyeSA9IGNhcHR1cmVzWzJdID8gcGFyc2VJbnQoY2FwdHVyZXNbMl0pIDogbnVsbDtcblxuICAvLyBlaXRoZXIgeWVhciBvciBjZW50dXJ5IGlzIG51bGwsIG5vdCBib3RoXG4gIHJldHVybiB7XG4gICAgeWVhcjogY2VudHVyeSA9PT0gbnVsbCA/IHllYXIgOiBjZW50dXJ5ICogMTAwLFxuICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKChjYXB0dXJlc1sxXSB8fCBjYXB0dXJlc1syXSkubGVuZ3RoKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuXG4gIGNvbnN0IGNhcHR1cmVzID0gZGF0ZVN0cmluZy5tYXRjaChkYXRlUmVnZXgpO1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgc3RyaW5nXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuXG4gIGNvbnN0IGlzV2Vla0RhdGUgPSAhIWNhcHR1cmVzWzRdO1xuICBjb25zdCBkYXlPZlllYXIgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzFdKTtcbiAgY29uc3QgbW9udGggPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzJdKSAtIDE7XG4gIGNvbnN0IGRheSA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbM10pO1xuICBjb25zdCB3ZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s0XSk7XG4gIGNvbnN0IGRheU9mV2VlayA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbNV0pIC0gMTtcblxuICBpZiAoaXNXZWVrRGF0ZSkge1xuICAgIGlmICghdmFsaWRhdGVXZWVrRGF0ZSh5ZWFyLCB3ZWVrLCBkYXlPZldlZWspKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gICAgcmV0dXJuIGRheU9mSVNPV2Vla1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoMCk7XG4gICAgaWYgKFxuICAgICAgIXZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF5KSB8fFxuICAgICAgIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgTWF0aC5tYXgoZGF5T2ZZZWFyLCBkYXkpKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZURhdGVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHBhcnNlSW50KHZhbHVlKSA6IDE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XG4gIGNvbnN0IGNhcHR1cmVzID0gdGltZVN0cmluZy5tYXRjaCh0aW1lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gTmFOOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgdGltZVxuXG4gIGNvbnN0IGhvdXJzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1sxXSk7XG4gIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgY29uc3Qgc2Vjb25kcyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbM10pO1xuXG4gIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlICsgc2Vjb25kcyAqIDEwMDBcbiAgKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lVW5pdCh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZShcIixcIiwgXCIuXCIpKSkgfHwgMDtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lem9uZSh0aW1lem9uZVN0cmluZykge1xuICBpZiAodGltZXpvbmVTdHJpbmcgPT09IFwiWlwiKSByZXR1cm4gMDtcblxuICBjb25zdCBjYXB0dXJlcyA9IHRpbWV6b25lU3RyaW5nLm1hdGNoKHRpbWV6b25lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gMDtcblxuICBjb25zdCBzaWduID0gY2FwdHVyZXNbMV0gPT09IFwiK1wiID8gLTEgOiAxO1xuICBjb25zdCBob3VycyA9IHBhcnNlSW50KGNhcHR1cmVzWzJdKTtcbiAgY29uc3QgbWludXRlcyA9IChjYXB0dXJlc1szXSAmJiBwYXJzZUludChjYXB0dXJlc1szXSkpIHx8IDA7XG5cbiAgaWYgKCF2YWxpZGF0ZVRpbWV6b25lKGhvdXJzLCBtaW51dGVzKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICByZXR1cm4gc2lnbiAqIChob3VycyAqIG1pbGxpc2Vjb25kc0luSG91ciArIG1pbnV0ZXMgKiBtaWxsaXNlY29uZHNJbk1pbnV0ZSk7XG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoMCk7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoaXNvV2Vla1llYXIsIDAsIDQpO1xuICBjb25zdCBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDc7XG4gIGNvbnN0IGRpZmYgPSAod2VlayAtIDEpICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcblxuLy8gRmVicnVhcnkgaXMgbnVsbCB0byBoYW5kbGUgdGhlIGxlYXAgeWVhciAodXNpbmcgfHwpXG5jb25zdCBkYXlzSW5Nb250aHMgPSBbMzEsIG51bGwsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgcmV0dXJuIChcbiAgICBtb250aCA+PSAwICYmXG4gICAgbW9udGggPD0gMTEgJiZcbiAgICBkYXRlID49IDEgJiZcbiAgICBkYXRlIDw9IChkYXlzSW5Nb250aHNbbW9udGhdIHx8IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAyOSA6IDI4KSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcikge1xuICByZXR1cm4gZGF5T2ZZZWFyID49IDEgJiYgZGF5T2ZZZWFyIDw9IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAzNjYgOiAzNjUpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVdlZWtEYXRlKF95ZWFyLCB3ZWVrLCBkYXkpIHtcbiAgcmV0dXJuIHdlZWsgPj0gMSAmJiB3ZWVrIDw9IDUzICYmIGRheSA+PSAwICYmIGRheSA8PSA2O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWUoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpIHtcbiAgaWYgKGhvdXJzID09PSAyNCkge1xuICAgIHJldHVybiBtaW51dGVzID09PSAwICYmIHNlY29uZHMgPT09IDA7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIHNlY29uZHMgPj0gMCAmJlxuICAgIHNlY29uZHMgPCA2MCAmJlxuICAgIG1pbnV0ZXMgPj0gMCAmJlxuICAgIG1pbnV0ZXMgPCA2MCAmJlxuICAgIGhvdXJzID49IDAgJiZcbiAgICBob3VycyA8IDI1XG4gICk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZXpvbmUoX2hvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8PSA1OTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBwYXJzZUlTTztcbiIsIi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBhcmd1bWVudCAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgY29uc3QgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoXG4gICAgYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgKHR5cGVvZiBhcmd1bWVudCA9PT0gXCJvYmplY3RcIiAmJiBhcmdTdHIgPT09IFwiW29iamVjdCBEYXRlXVwiKVxuICApIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IGFyZ3VtZW50LmNvbnN0cnVjdG9yKCthcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAoXG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSBcIm51bWJlclwiIHx8XG4gICAgYXJnU3RyID09PSBcIltvYmplY3QgTnVtYmVyXVwiIHx8XG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSBcInN0cmluZ1wiIHx8XG4gICAgYXJnU3RyID09PSBcIltvYmplY3QgU3RyaW5nXVwiXG4gICkge1xuICAgIC8vIFRPRE86IENhbiB3ZSBnZXQgcmlkIG9mIGFzP1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgYXM/XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCB0b0RhdGU7XG4iLCJpbXBvcnQgeyBpc0RhdGUgfSBmcm9tIFwiLi9pc0RhdGUubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGUpXG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMgVGhlIGRhdGUgaXMgdmFsaWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWQoZGF0ZSkge1xuICBpZiAoIWlzRGF0ZShkYXRlKSAmJiB0eXBlb2YgZGF0ZSAhPT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoX2RhdGUpKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc1ZhbGlkO1xuIiwiLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgRGF0ZV1cIilcbiAgKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc0RhdGU7XG4iLCJjb25zdCBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBzZWNvbmRcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICB4U2Vjb25kczoge1xuICAgIG9uZTogXCIxIHNlY29uZFwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBzZWNvbmRzXCIsXG4gIH0sXG5cbiAgaGFsZkFNaW51dGU6IFwiaGFsZiBhIG1pbnV0ZVwiLFxuXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6IFwibGVzcyB0aGFuIGEgbWludXRlXCIsXG4gICAgb3RoZXI6IFwibGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6IFwiMSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0gbWludXRlc1wiLFxuICB9LFxuXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgaG91clwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhIb3Vyczoge1xuICAgIG9uZTogXCIxIGhvdXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0gaG91cnNcIixcbiAgfSxcblxuICB4RGF5czoge1xuICAgIG9uZTogXCIxIGRheVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBkYXlzXCIsXG4gIH0sXG5cbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgeFdlZWtzOiB7XG4gICAgb25lOiBcIjEgd2Vla1wiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSB3ZWVrc1wiLFxuICB9LFxuXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogXCJhYm91dCAxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIHhNb250aHM6IHtcbiAgICBvbmU6IFwiMSBtb250aFwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtb250aHNcIixcbiAgfSxcblxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogXCJhYm91dCAxIHllYXJcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICB4WWVhcnM6IHtcbiAgICBvbmU6IFwiMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHllYXJzXCIsXG4gIH0sXG5cbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogXCJvdmVyIDEgeWVhclwiLFxuICAgIG90aGVyOiBcIm92ZXIge3tjb3VudH19IHllYXJzXCIsXG4gIH0sXG5cbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiBcImFsbW9zdCAxIHllYXJcIixcbiAgICBvdGhlcjogXCJhbG1vc3Qge3tjb3VudH19IHllYXJzXCIsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0RGlzdGFuY2UgPSAodG9rZW4sIGNvdW50LCBvcHRpb25zKSA9PiB7XG4gIGxldCByZXN1bHQ7XG5cbiAgY29uc3QgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZShcInt7Y291bnR9fVwiLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zPy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiBcImluIFwiICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgXCIgYWdvXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIGNvbnN0IGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgYnVpbGRGb3JtYXRMb25nRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi5tanNcIjtcblxuY29uc3QgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiRUVFRSwgTU1NTSBkbywgeVwiLFxuICBsb25nOiBcIk1NTU0gZG8sIHlcIixcbiAgbWVkaXVtOiBcIk1NTSBkLCB5XCIsXG4gIHNob3J0OiBcIk1NL2RkL3l5eXlcIixcbn07XG5cbmNvbnN0IHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcImg6bW06c3MgYSB6enp6XCIsXG4gIGxvbmc6IFwiaDptbTpzcyBhIHpcIixcbiAgbWVkaXVtOiBcImg6bW06c3MgYVwiLFxuICBzaG9ydDogXCJoOm1tIGFcIixcbn07XG5cbmNvbnN0IGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06IFwie3tkYXRlfX0sIHt7dGltZX19XCIsXG4gIHNob3J0OiBcInt7ZGF0ZX19LCB7e3RpbWV9fVwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcblxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiBcImZ1bGxcIixcbiAgfSksXG5cbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiBcImZ1bGxcIixcbiAgfSksXG59O1xuIiwiY29uc3QgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiBcIlBcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRSZWxhdGl2ZSA9ICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpID0+XG4gIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogVGhlIGxvY2FsaXplIGZ1bmN0aW9uIGFyZ3VtZW50IGNhbGxiYWNrIHdoaWNoIGFsbG93cyB0byBjb252ZXJ0IHJhdyB2YWx1ZSB0b1xuICogdGhlIGFjdHVhbCB0eXBlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIGNvbnZlcnRlZCB2YWx1ZVxuICovXG5cbi8qKlxuICogVGhlIG1hcCBvZiBsb2NhbGl6ZWQgdmFsdWVzIGZvciBlYWNoIHdpZHRoLlxuICovXG5cbi8qKlxuICogVGhlIGluZGV4IHR5cGUgb2YgdGhlIGxvY2FsZSB1bml0IHZhbHVlLiBJdCB0eXBlcyBjb252ZXJzaW9uIG9mIHVuaXRzIG9mXG4gKiB2YWx1ZXMgdGhhdCBkb24ndCBzdGFydCBhdCAwIChpLmUuIHF1YXJ0ZXJzKS5cbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSB1bml0IHZhbHVlIHRvIHRoZSB0dXBsZSBvZiB2YWx1ZXMuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIGVyYSB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgQkMsXG4gKiB0aGUgc2Vjb25kIGVsZW1lbnQgcmVwcmVzZW50cyBBRC5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgcXVhcnRlciB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgUTEuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIGRheSB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgU3VuZGF5LlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBtb250aCB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgSmFudWFyeS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuICh2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBvcHRpb25zPy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiBcInN0YW5kYWxvbmVcIjtcblxuICAgIGxldCB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gXCJmb3JtYXR0aW5nXCIgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICBjb25zdCBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnM/LndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9XG4gICAgICAgIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgY29uc3Qgd2lkdGggPSBvcHRpb25zPy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59XG4iLCJpbXBvcnQgeyBidWlsZExvY2FsaXplRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4ubWpzXCI7XG5cbmNvbnN0IGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJCXCIsIFwiQVwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIkJDXCIsIFwiQURcIl0sXG4gIHdpZGU6IFtcIkJlZm9yZSBDaHJpc3RcIiwgXCJBbm5vIERvbWluaVwiXSxcbn07XG5cbmNvbnN0IHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIlExXCIsIFwiUTJcIiwgXCJRM1wiLCBcIlE0XCJdLFxuICB3aWRlOiBbXCIxc3QgcXVhcnRlclwiLCBcIjJuZCBxdWFydGVyXCIsIFwiM3JkIHF1YXJ0ZXJcIiwgXCI0dGggcXVhcnRlclwiXSxcbn07XG5cbi8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cbmNvbnN0IG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcbiAgICBcIkphblwiLFxuICAgIFwiRmViXCIsXG4gICAgXCJNYXJcIixcbiAgICBcIkFwclwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5cIixcbiAgICBcIkp1bFwiLFxuICAgIFwiQXVnXCIsXG4gICAgXCJTZXBcIixcbiAgICBcIk9jdFwiLFxuICAgIFwiTm92XCIsXG4gICAgXCJEZWNcIixcbiAgXSxcblxuICB3aWRlOiBbXG4gICAgXCJKYW51YXJ5XCIsXG4gICAgXCJGZWJydWFyeVwiLFxuICAgIFwiTWFyY2hcIixcbiAgICBcIkFwcmlsXCIsXG4gICAgXCJNYXlcIixcbiAgICBcIkp1bmVcIixcbiAgICBcIkp1bHlcIixcbiAgICBcIkF1Z3VzdFwiLFxuICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgXCJPY3RvYmVyXCIsXG4gICAgXCJOb3ZlbWJlclwiLFxuICAgIFwiRGVjZW1iZXJcIixcbiAgXSxcbn07XG5cbmNvbnN0IGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJTXCIsIFwiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCJdLFxuICBzaG9ydDogW1wiU3VcIiwgXCJNb1wiLCBcIlR1XCIsIFwiV2VcIiwgXCJUaFwiLCBcIkZyXCIsIFwiU2FcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIHdpZGU6IFtcbiAgICBcIlN1bmRheVwiLFxuICAgIFwiTW9uZGF5XCIsXG4gICAgXCJUdWVzZGF5XCIsXG4gICAgXCJXZWRuZXNkYXlcIixcbiAgICBcIlRodXJzZGF5XCIsXG4gICAgXCJGcmlkYXlcIixcbiAgICBcIlNhdHVyZGF5XCIsXG4gIF0sXG59O1xuXG5jb25zdCBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiBcImFcIixcbiAgICBwbTogXCJwXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlcIixcbiAgICBub29uOiBcIm5cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogXCJBTVwiLFxuICAgIHBtOiBcIlBNXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiBcImEubS5cIixcbiAgICBwbTogXCJwLm0uXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbn07XG5cbmNvbnN0IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiBcImFcIixcbiAgICBwbTogXCJwXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlcIixcbiAgICBub29uOiBcIm5cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogXCJBTVwiLFxuICAgIHBtOiBcIlBNXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiBcImEubS5cIixcbiAgICBwbTogXCJwLm0uXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbn07XG5cbmNvbnN0IG9yZGluYWxOdW1iZXIgPSAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSA9PiB7XG4gIGNvbnN0IG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICBjb25zdCByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwic3RcIjtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwibmRcIjtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwicmRcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArIFwidGhcIjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcixcblxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgICBhcmd1bWVudENhbGxiYWNrOiAocXVhcnRlcikgPT4gcXVhcnRlciAtIDEsXG4gIH0pLFxuXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgY29uc3QgbWF0Y2hQYXR0ZXJuID1cbiAgICAgICh3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdKSB8fFxuICAgICAgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VQYXR0ZXJucyA9XG4gICAgICAod2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcblxuICAgIGNvbnN0IGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucylcbiAgICAgID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZykpXG4gICAgICA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICAgICAgZmluZEtleShwYXJzZVBhdHRlcm5zLCAocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpKTtcblxuICAgIGxldCB2YWx1ZTtcblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gSSBjaGFsbGFuZ2UgeW91IHRvIGZpeCB0aGUgdHlwZVxuICAgICAgICBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpXG4gICAgICA6IHZhbHVlO1xuXG4gICAgY29uc3QgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgICByZXR1cm4geyB2YWx1ZSwgcmVzdCB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiZcbiAgICAgIHByZWRpY2F0ZShvYmplY3Rba2V5XSlcbiAgICApIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAobGV0IGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiaW1wb3J0IHsgYnVpbGRNYXRjaEZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRNYXRjaEZuLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRNYXRjaFBhdHRlcm5GbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4ubWpzXCI7XG5cbmNvbnN0IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG5jb25zdCBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcblxuY29uc3QgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pLFxufTtcbmNvbnN0IHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldLFxufTtcblxuY29uc3QgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaSxcbn07XG5jb25zdCBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV0sXG59O1xuXG5jb25zdCBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbn07XG5jb25zdCBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogW1xuICAgIC9eai9pLFxuICAgIC9eZi9pLFxuICAgIC9ebS9pLFxuICAgIC9eYS9pLFxuICAgIC9ebS9pLFxuICAgIC9eai9pLFxuICAgIC9eai9pLFxuICAgIC9eYS9pLFxuICAgIC9ecy9pLFxuICAgIC9eby9pLFxuICAgIC9ebi9pLFxuICAgIC9eZC9pLFxuICBdLFxuXG4gIGFueTogW1xuICAgIC9eamEvaSxcbiAgICAvXmYvaSxcbiAgICAvXm1hci9pLFxuICAgIC9eYXAvaSxcbiAgICAvXm1heS9pLFxuICAgIC9eanVuL2ksXG4gICAgL15qdWwvaSxcbiAgICAvXmF1L2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG59O1xuXG5jb25zdCBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pLFxufTtcbmNvbnN0IHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxufTtcbmNvbnN0IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiAodmFsdWUpID0+IHBhcnNlSW50KHZhbHVlLCAxMCksXG4gIH0pLFxuXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICB9KSxcblxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgICB2YWx1ZUNhbGxiYWNrOiAoaW5kZXgpID0+IGluZGV4ICsgMSxcbiAgfSksXG5cbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICB9KSxcblxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogXCJhbnlcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICB9KSxcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiAoc3RyaW5nLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIGxldCB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFja1xuICAgICAgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pXG4gICAgICA6IHBhcnNlUmVzdWx0WzBdO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gSSBjaGFsbGFuZ2UgeW91IHRvIGZpeCB0aGUgdHlwZVxuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgY29uc3QgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgICByZXR1cm4geyB2YWx1ZSwgcmVzdCB9O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgZm9ybWF0RGlzdGFuY2UgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlLm1qc1wiO1xuaW1wb3J0IHsgZm9ybWF0TG9uZyB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0TG9uZy5tanNcIjtcbmltcG9ydCB7IGZvcm1hdFJlbGF0aXZlIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5tanNcIjtcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9sb2NhbGl6ZS5tanNcIjtcbmltcG9ydCB7IG1hdGNoIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9tYXRjaC5tanNcIjtcblxuLyoqXG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXShodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycClcbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc10oaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zcylcbiAqL1xuZXhwb3J0IGNvbnN0IGVuVVMgPSB7XG4gIGNvZGU6IFwiZW4tVVNcIixcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwIC8qIFN1bmRheSAqLyxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDEsXG4gIH0sXG59O1xuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGVuVVM7XG4iLCJsZXQgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn1cbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mRGF5O1xuIiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIGNvbnN0IHV0Y0RhdGUgPSBuZXcgRGF0ZShcbiAgICBEYXRlLlVUQyhcbiAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRIb3VycygpLFxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG4gICAgKSxcbiAgKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn1cbiIsIi8qKlxuICogQG5hbWUgY29uc3RydWN0RnJvbVxuICogQGNhdGVnb3J5IEdlbmVyaWMgSGVscGVyc1xuICogQHN1bW1hcnkgQ29uc3RydWN0cyBhIGRhdGUgdXNpbmcgdGhlIHJlZmVyZW5jZSBkYXRlIGFuZCB0aGUgdmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmdW5jdGlvbiBjb25zdHJ1Y3RzIGEgbmV3IGRhdGUgdXNpbmcgdGhlIGNvbnN0cnVjdG9yIGZyb20gdGhlIHJlZmVyZW5jZVxuICogZGF0ZSBhbmQgdGhlIGdpdmVuIHZhbHVlLiBJdCBoZWxwcyB0byBidWlsZCBnZW5lcmljIGZ1bmN0aW9ucyB0aGF0IGFjY2VwdFxuICogZGF0ZSBleHRlbnNpb25zLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIHJlZmVyZW5jZSBkYXRlIHRvIHRha2UgY29uc3RydWN0b3IgZnJvbVxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNyZWF0ZSB0aGUgZGF0ZVxuICpcbiAqIEByZXR1cm5zIERhdGUgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIGdpdmVuIGRhdGUgYW5kIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tICdkYXRlLWZucydcbiAqXG4gKiAvLyBBIGZ1bmN0aW9uIHRoYXQgY2xvbmVzIGEgZGF0ZSBwcmVzZXJ2aW5nIHRoZSBvcmlnaW5hbCB0eXBlXG4gKiBmdW5jdGlvbiBjbG9uZURhdGU8RGF0ZVR5cGUgZXh0ZW5kcyBEYXRlKGRhdGU6IERhdGVUeXBlKTogRGF0ZVR5cGUge1xuICogICByZXR1cm4gY29uc3RydWN0RnJvbShcbiAqICAgICBkYXRlLCAvLyBVc2UgY29udHJ1c3RvciBmcm9tIHRoZSBnaXZlbiBkYXRlXG4gKiAgICAgZGF0ZS5nZXRUaW1lKCkgLy8gVXNlIHRoZSBkYXRlIHZhbHVlIHRvIGNyZWF0ZSBhIG5ldyBkYXRlXG4gKiAgIClcbiAqIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdEZyb20oZGF0ZSwgdmFsdWUpIHtcbiAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkYXRlLmNvbnN0cnVjdG9yKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgY29uc3RydWN0RnJvbTtcbiIsImltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyB9IGZyb20gXCIuL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZlllYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0RGF5T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBkYXkgb2YgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXlPZlllYXIobmV3IERhdGUoMjAxNCwgNiwgMikpXG4gKiAvLz0+IDE4M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoX2RhdGUsIHN0YXJ0T2ZZZWFyKF9kYXRlKSk7XG4gIGNvbnN0IGRheU9mWWVhciA9IGRpZmYgKyAxO1xuICByZXR1cm4gZGF5T2ZZZWFyO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldERheU9mWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luRGF5IH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCIuL3N0YXJ0T2ZEYXkubWpzXCI7XG5pbXBvcnQgeyBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIH0gZnJvbSBcIi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy4gVGhpcyBtZWFucyB0aGF0IHRoZSB0aW1lcyBhcmUgcmVtb3ZlZFxuICogZnJvbSB0aGUgZGF0ZXMgYW5kIHRoZW4gdGhlIGRpZmZlcmVuY2UgaW4gZGF5cyBpcyBjYWxjdWxhdGVkLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlTGVmdCAtIFRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0gZGF0ZVJpZ2h0IC0gVGhlIGVhcmxpZXIgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5c1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzowMDowMCBhbmQgMiBKdWx5IDIwMTIgMDA6MDA6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzo1OTowMCBhbmQgMyBKdWx5IDIwMTEgMDA6MDE6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IHN0YXJ0T2ZEYXlMZWZ0ID0gc3RhcnRPZkRheShkYXRlTGVmdCk7XG4gIGNvbnN0IHN0YXJ0T2ZEYXlSaWdodCA9IHN0YXJ0T2ZEYXkoZGF0ZVJpZ2h0KTtcblxuICBjb25zdCB0aW1lc3RhbXBMZWZ0ID1cbiAgICBzdGFydE9mRGF5TGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlMZWZ0KTtcbiAgY29uc3QgdGltZXN0YW1wUmlnaHQgPVxuICAgIHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLVxuICAgIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgZGF5IG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBtaWxsaXNlY29uZHNJbkRheSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzO1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZlllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMDApKVxuICogLy89PiBXZWQgSmFuIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgY2xlYW5EYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBfZGF0ZSA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIF9kYXRlLnNldEZ1bGxZZWFyKGNsZWFuRGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mWWVhcjtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRheSA9IF9kYXRlLmdldERheSgpO1xuICBjb25zdCBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcblxuICBfZGF0ZS5zZXREYXRlKF9kYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBfZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZXZWVrO1xuIiwiaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mSVNPV2Vla1xuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZJU09XZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZklTT1dlZWsoZGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZldlZWsoZGF0ZSwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZklTT1dlZWs7XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0SVNPV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZSxcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIElTTy13ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0SVNPV2Vla1llYXIobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDIwMDRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElTT1dlZWtZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IHllYXIgPSBfZGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gIGNvbnN0IGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG5cbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0RnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWtZZWFyO1xuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5XZWVrIH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrWWVhciB9IGZyb20gXCIuL3N0YXJ0T2ZJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBnZXRJU09XZWVrXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBJU08gd2VlayBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgSVNPIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRJU09XZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiA1M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVNPV2VlayhkYXRlKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBkaWZmID1cbiAgICBzdGFydE9mSVNPV2VlayhfZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZklTT1dlZWtZZWFyKF9kYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIG1pbGxpc2Vjb25kc0luV2VlaykgKyAxO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWs7XG4iLCJpbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuL2dldElTT1dlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcixcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrWWVhcihkYXRlKSB7XG4gIGNvbnN0IHllYXIgPSBnZXRJU09XZWVrWWVhcihkYXRlKTtcbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5ID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrWWVhcjtcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIGdldFdlZWtZZWFyfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0V2Vla1llYXJcbiAqIEBjYXRlZ29yeSBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSBleGFjdCBjYWxjdWxhdGlvbiBkZXBlbmRzIG9uIHRoZSB2YWx1ZXMgb2ZcbiAqIGBvcHRpb25zLndlZWtTdGFydHNPbmAgKHdoaWNoIGlzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrKVxuICogYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKHdoaWNoIGlzIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluXG4gKiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhcilcbiAqXG4gKiBXZWVrIG51bWJlcmluZzogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2VlayNUaGVfSVNPX3dlZWtfZGF0ZV9zeXN0ZW1cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKlxuICogQHJldHVybnMgVGhlIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBudW1iZXJpbmcgeWVhciBpcyAyNiBEZWNlbWJlciAyMDA0IHdpdGggdGhlIGRlZmF1bHQgc2V0dGluZ3M/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrWWVhcihuZXcgRGF0ZSgyMDA0LCAxMSwgMjYpKVxuICogLy89PiAyMDA1XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMjYgRGVjZW1iZXIgMjAwNCBpZiB3ZWVrIHN0YXJ0cyBvbiBTYXR1cmRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWtZZWFyKG5ldyBEYXRlKDIwMDQsIDExLCAyNiksIHsgd2Vla1N0YXJ0c09uOiA2IH0pXG4gKiAvLz0+IDIwMDRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBudW1iZXJpbmcgeWVhciBpcyAyNiBEZWNlbWJlciAyMDA0IGlmIHRoZSBmaXJzdCB3ZWVrIGNvbnRhaW5zIDQgSmFudWFyeT9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWtZZWFyKG5ldyBEYXRlKDIwMDQsIDExLCAyNiksIHsgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0IH0pXG4gKiAvLz0+IDIwMDRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IHllYXIgPSBfZGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3QgZmlyc3RXZWVrQ29udGFpbnNEYXRlID1cbiAgICBvcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgMTtcblxuICBjb25zdCBmaXJzdFdlZWtPZk5leHRZZWFyID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZldlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG5cbiAgY29uc3QgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0RnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZldlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG5cbiAgaWYgKF9kYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKF9kYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZ2V0V2Vla1llYXI7XG4iLCJpbXBvcnQgeyBtaWxsaXNlY29uZHNJbldlZWsgfSBmcm9tIFwiLi9jb25zdGFudHMubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWtZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZldlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZ2V0V2Vla30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGdldFdlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbG9jYWwgd2VlayBpbmRleCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbG9jYWwgd2VlayBpbmRleCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSBleGFjdCBjYWxjdWxhdGlvbiBkZXBlbmRzIG9uIHRoZSB2YWx1ZXMgb2ZcbiAqIGBvcHRpb25zLndlZWtTdGFydHNPbmAgKHdoaWNoIGlzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrKVxuICogYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKHdoaWNoIGlzIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluXG4gKiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhcilcbiAqXG4gKiBXZWVrIG51bWJlcmluZzogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2VlayNUaGVfSVNPX3dlZWtfZGF0ZV9zeXN0ZW1cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG9mIHRoZSBsb2NhbCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1IHdpdGggZGVmYXVsdCBvcHRpb25zP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2VlayhuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gMlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG9mIHRoZSBsb2NhbCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1LFxuICogLy8gaWYgTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssXG4gKiAvLyBhbmQgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIgYWx3YXlzIGNvbnRhaW5zIDQgSmFudWFyeT9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWsobmV3IERhdGUoMjAwNSwgMCwgMiksIHtcbiAqICAgd2Vla1N0YXJ0c09uOiAxLFxuICogICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAqIH0pXG4gKiAvLz0+IDUzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWsoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgZGlmZiA9XG4gICAgc3RhcnRPZldlZWsoX2RhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtXG4gICAgc3RhcnRPZldlZWtZZWFyKF9kYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIG1pbGxpc2Vjb25kc0luV2VlaykgKyAxO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldFdlZWs7XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcbmltcG9ydCB7IGdldFdlZWtZZWFyIH0gZnJvbSBcIi4vZ2V0V2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRPcHRpb25zLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgc3RhcnRPZldlZWtZZWFyfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtZZWFyXG4gKiBAY2F0ZWdvcnkgV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqIFRoZSBleGFjdCBjYWxjdWxhdGlvbiBkZXBlbmRzIG9uIHRoZSB2YWx1ZXMgb2ZcbiAqIGBvcHRpb25zLndlZWtTdGFydHNPbmAgKHdoaWNoIGlzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrKVxuICogYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKHdoaWNoIGlzIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluXG4gKiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhcilcbiAqXG4gKiBXZWVrIG51bWJlcmluZzogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2VlayNUaGVfSVNPX3dlZWtfZGF0ZV9zeXN0ZW1cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1IHdpdGggZGVmYXVsdCBzZXR0aW5nczpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSlcbiAqIC8vPT4gU3VuIERlYyAyNiAyMDA0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1XG4gKiAvLyBpZiBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB3ZWVrXG4gKiAvLyBhbmQgNCBKYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhcjpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSwge1xuICogICB3ZWVrU3RhcnRzT246IDEsXG4gKiAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICogfSlcbiAqIC8vPT4gTW9uIEphbiAwMyAyMDA1IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9XG4gICAgb3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIDE7XG5cbiAgY29uc3QgeWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICBjb25zdCBmaXJzdFdlZWsgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWsuc2V0RnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBfZGF0ZSA9IHN0YXJ0T2ZXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mV2Vla1llYXI7XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIGNvbnN0IHNpZ24gPSBudW1iZXIgPCAwID8gXCItXCIgOiBcIlwiO1xuICBjb25zdCBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCkucGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBcIjBcIik7XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufVxuIiwiaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGxpZ2h0Rm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3QgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09IFwieXlcIiA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIE1vbnRoXG4gIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09IFwiTVwiID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEFNIG9yIFBNXG4gIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldEhvdXJzKCkgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgIGNhc2UgXCJhYVwiOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlIFwiYWFhXCI6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlIFwiYWFhYWFcIjpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgXCJhYWFhXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSBcImFtXCIgPyBcImEubS5cIiA6IFwicC5tLlwiO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTWludXRlXG4gIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIFNlY29uZFxuICBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFNlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUyhkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgY29uc3QgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKFxuICAgICAgbWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMyksXG4gICAgKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGdldERheU9mWWVhciB9IGZyb20gXCIuLi8uLi9nZXREYXlPZlllYXIubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrIH0gZnJvbSBcIi4uLy4uL2dldElTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuLi8uLi9nZXRJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IGdldFdlZWsgfSBmcm9tIFwiLi4vLi4vZ2V0V2Vlay5tanNcIjtcbmltcG9ydCB7IGdldFdlZWtZZWFyIH0gZnJvbSBcIi4uLy4uL2dldFdlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcbmltcG9ydCB7IGxpZ2h0Rm9ybWF0dGVycyB9IGZyb20gXCIuL2xpZ2h0Rm9ybWF0dGVycy5tanNcIjtcblxuY29uc3QgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06IFwiYW1cIixcbiAgcG06IFwicG1cIixcbiAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgbm9vbjogXCJub29uXCIsXG4gIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICBuaWdodDogXCJuaWdodFwiLFxufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGVyYSA9IGRhdGUuZ2V0RnVsbFllYXIoKSA+IDAgPyAxIDogMDtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgXCJHXCI6XG4gICAgICBjYXNlIFwiR0dcIjpcbiAgICAgIGNhc2UgXCJHR0dcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIiB9KTtcbiAgICAgIC8vIEEsIEJcbiAgICAgIGNhc2UgXCJHR0dHR1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwgeyB3aWR0aDogXCJuYXJyb3dcIiB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlIFwiR0dHR1wiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwid2lkZVwiIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gXCJ5b1wiKSB7XG4gICAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICAgIGNvbnN0IHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHsgdW5pdDogXCJ5ZWFyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduZWRXZWVrWWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3Qgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICAgIGNvbnN0IHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSBcIllvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7IHVuaXQ6IFwieWVhclwiIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IGlzb1dlZWtZZWFyID0gZ2V0SVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldE1vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgXCJRXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSBcIlFRXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgXCJRb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7IHVuaXQ6IFwicXVhcnRlclwiIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgXCJRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlIFwiUVFRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlIFwiUVFRUVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0TW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSBcInFvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHsgdW5pdDogXCJxdWFydGVyXCIgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSBcInFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgXCJxcXFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgXCJxcXFxXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJNb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTU1NTU1cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcImZvcm1hdHRpbmdcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJMb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTExMTExcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcInN0YW5kYWxvbmVcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWVrID0gZ2V0V2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJ3b1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBpc29XZWVrID0gZ2V0SVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJJb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwiZG9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXREYXRlKCksIHsgdW5pdDogXCJkYXRlXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgZGF5T2ZZZWFyID0gZ2V0RGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSBcIkRvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwgeyB1bml0OiBcImRheU9mWWVhclwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJFRVwiOlxuICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSBcIkVFRUVFXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgXCJFRUVFRUVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJzaG9ydFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgXCJlZVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImVvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiZWVlXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiZWVlZWVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImVlZWVlZVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImVlZWVcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgY29uc3QgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlIFwiY2NcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImNvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImNjY2NjY1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgXCJpaVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuICAgICAgY2FzZSBcImlvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2VlaywgeyB1bml0OiBcImRheVwiIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlIFwiaWlpXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiaWlpaWlcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImlpaWlpaVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImlpaWlcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgIGNvbnN0IGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/IFwicG1cIiA6IFwiYW1cIjtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJhXCI6XG4gICAgICBjYXNlIFwiYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJhYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImFhYWFhXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImFhYWFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJiXCI6XG4gICAgICBjYXNlIFwiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImJiYmJiXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImJiYmJcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiQlwiOlxuICAgICAgY2FzZSBcIkJCXCI6XG4gICAgICBjYXNlIFwiQkJCXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQkJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQlwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcImhvXCIpIHtcbiAgICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcIkhvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0SG91cnMoKSwgeyB1bml0OiBcImhvdXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSBcIktvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7IHVuaXQ6IFwiaG91clwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09IFwia29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gXCJtb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldE1pbnV0ZXMoKSwgeyB1bml0OiBcIm1pbnV0ZVwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwic29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRTZWNvbmRzKCksIHsgdW5pdDogXCJzZWNvbmRcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiWlwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlIFwiWFwiOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlIFwiWFhYWFwiOlxuICAgICAgY2FzZSBcIlhYXCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlIFwiWFhYWFhcIjpcbiAgICAgIGNhc2UgXCJYWFhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcbiAgICAgIGNhc2UgXCJ4eHh4XCI6XG4gICAgICBjYXNlIFwieHhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcbiAgICAgIGNhc2UgXCJ4eHh4eFwiOlxuICAgICAgY2FzZSBcInh4eFwiOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgIH1cbiAgfSxcblxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIGNvbnN0IHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSBcIk9cIjpcbiAgICAgIGNhc2UgXCJPT1wiOlxuICAgICAgY2FzZSBcIk9PT1wiOlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgXCJPT09PXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgY2FzZSBcInp6XCI6XG4gICAgICBjYXNlIFwienp6XCI6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSBcInp6enpcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkZWxpbWl0ZXIgPSBcIlwiKSB7XG4gIGNvbnN0IHNpZ24gPSBvZmZzZXQgPiAwID8gXCItXCIgOiBcIitcIjtcbiAgY29uc3QgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgY29uc3QgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICBjb25zdCBzaWduID0gb2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCI7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRlbGltaXRlciA9IFwiXCIpIHtcbiAgY29uc3Qgc2lnbiA9IG9mZnNldCA+IDAgPyBcIi1cIiA6IFwiK1wiO1xuICBjb25zdCBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICBjb25zdCBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIGNvbnN0IG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbiIsImNvbnN0IGRhdGVMb25nRm9ybWF0dGVyID0gKHBhdHRlcm4sIGZvcm1hdExvbmcpID0+IHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcIlBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgIGNhc2UgXCJQUFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcIm1lZGl1bVwiIH0pO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJsb25nXCIgfSk7XG4gICAgY2FzZSBcIlBQUFBcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgfVxufTtcblxuY29uc3QgdGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlIFwicFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcInNob3J0XCIgfSk7XG4gICAgY2FzZSBcInBwXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwibWVkaXVtXCIgfSk7XG4gICAgY2FzZSBcInBwcFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICBjYXNlIFwicHBwcFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwiZnVsbFwiIH0pO1xuICB9XG59O1xuXG5jb25zdCBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBjb25zdCBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICBjb25zdCBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICBjb25zdCB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICBsZXQgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgXCJQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJtZWRpdW1cIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBQXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0XG4gICAgLnJlcGxhY2UoXCJ7e2RhdGV9fVwiLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpXG4gICAgLnJlcGxhY2UoXCJ7e3RpbWV9fVwiLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyLFxufTtcbiIsImNvbnN0IHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFtcIkRcIiwgXCJERFwiXTtcbmNvbnN0IHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gW1wiWVlcIiwgXCJZWVlZXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09IFwiWVlZWVwiKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgVXNlIFxcYHl5eXlcXGAgaW5zdGVhZCBvZiBcXGBZWVlZXFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBcXGAke2lucHV0fVxcYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kYCxcbiAgICApO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVc2UgXFxgeXlcXGAgaW5zdGVhZCBvZiBcXGBZWVxcYCAoaW4gXFxgJHtmb3JtYXR9XFxgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgXFxgJHtpbnB1dH1cXGA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZGAsXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJEXCIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVc2UgXFxgZFxcYCBpbnN0ZWFkIG9mIFxcYERcXGAgKGluIFxcYCR7Zm9ybWF0fVxcYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IFxcYCR7aW5wdXR9XFxgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRgLFxuICAgICk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiRERcIikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYFVzZSBcXGBkZFxcYCBpbnN0ZWFkIG9mIFxcYEREXFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBcXGAke2lucHV0fVxcYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kYCxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSBcIi4vaXNWYWxpZC5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRMb2NhbGUgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRMb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXR0ZXJzIH0gZnJvbSBcIi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy5tanNcIjtcbmltcG9ydCB7IGxvbmdGb3JtYXR0ZXJzIH0gZnJvbSBcIi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMubWpzXCI7XG5pbXBvcnQge1xuICBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLFxuICBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sXG4gIHRocm93UHJvdGVjdGVkRXJyb3IsXG59IGZyb20gXCIuL19saWIvcHJvdGVjdGVkVG9rZW5zLm1qc1wiO1xuXG4vLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbmNvbnN0IGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPVxuICAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbmNvbnN0IGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbmNvbnN0IGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbmNvbnN0IGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG5jb25zdCB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogVGhlIHtAbGluayBmb3JtYXR9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcilcbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJdKGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXIpKS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIGZvcm1hdCAtIFRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKlxuICogQHRocm93cyBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3MgYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KGRhdGUsIGZvcm1hdFN0ciwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnM/LmxvY2FsZSA/PyBkZWZhdWx0T3B0aW9ucy5sb2NhbGUgPz8gZGVmYXVsdExvY2FsZTtcblxuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3Qgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHRpbWUgdmFsdWVcIik7XG4gIH1cblxuICBjb25zdCBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZSxcbiAgfTtcblxuICBjb25zdCByZXN1bHQgPSBmb3JtYXRTdHJcbiAgICAubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICBjb25zdCBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCJwXCIgfHwgZmlyc3RDaGFyYWN0ZXIgPT09IFwiUFwiKSB7XG4gICAgICAgIGNvbnN0IGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1YnN0cmluZztcbiAgICB9KVxuICAgIC5qb2luKFwiXCIpXG4gICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFvcHRpb25zPy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiZcbiAgICAgICAgICBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb3B0aW9ucz8udXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJlxuICAgICAgICAgIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZXIoXG4gICAgICAgICAgb3JpZ2luYWxEYXRlLFxuICAgICAgICAgIHN1YnN0cmluZyxcbiAgICAgICAgICBsb2NhbGUubG9jYWxpemUsXG4gICAgICAgICAgZm9ybWF0dGVyT3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICBcIkZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgXCIgK1xuICAgICAgICAgICAgZmlyc3RDaGFyYWN0ZXIgK1xuICAgICAgICAgICAgXCJgXCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJzdHJpbmc7XG4gICAgfSlcbiAgICAuam9pbihcIlwiKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgY29uc3QgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuXG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBmb3JtYXQ7XG4iLCJmdW5jdGlvbiB1cGRhdGVCdXR0b25zKG5leHRCdXR0b24sIGJhY2tCdXR0b24sIGN1cnJTbGlkZSwgbWF4U2xpZGUsIG1pblNsaWRlKSB7XG4gICAgY29uc3QgY2FuU2xpZGVGb3J3YXJkID0gY3VyclNsaWRlIDwgbWF4U2xpZGUgLSAxO1xuICAgIGNvbnN0IGNhblNsaWRlQmFjayA9IGN1cnJTbGlkZSA+IG1pblNsaWRlO1xuXG4gICAgbmV4dEJ1dHRvbi5kaXNhYmxlZCA9ICFjYW5TbGlkZUZvcndhcmQ7XG4gICAgYmFja0J1dHRvbi5kaXNhYmxlZCA9ICFjYW5TbGlkZUJhY2s7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNsaWRlcihcbiAgICBuZXh0QnV0dG9uLFxuICAgIGJhY2tCdXR0b24sXG4gICAgc2xpZGVyRWxtLFxuICAgIGNhcmRDb3VudCxcbiAgICBjYXJkc1BlclNsaWRlLFxuICAgIGlzR3JpZFxuKSB7XG4gICAgY29uc3QgbWluU2xpZGUgPSAwO1xuICAgIGxldCBtYXhTbGlkZSA9IGNhcmRDb3VudCAvIGNhcmRzUGVyU2xpZGU7XG5cbiAgICBsZXQgY3VyclNsaWRlID0gMDtcblxuICAgIGxldCBjYWxjZWRXaWR0aCA9IDEwMCAqIG1heFNsaWRlO1xuICAgIHNsaWRlckVsbS5zdHlsZS53aWR0aCA9IGAke2NhbGNlZFdpZHRofSVgO1xuICAgIGlmIChpc0dyaWQpIHtcbiAgICAgICAgc2xpZGVyRWxtLnN0eWxlLmdyaWRBdXRvQ29sdW1ucyA9IGAke2NhbGNlZFdpZHRoIC8gY2FyZENvdW50fSVgO1xuICAgIH1cbiAgICBuZXh0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAoY3VyclNsaWRlIDwgbWF4U2xpZGUgLSAxKSB7XG4gICAgICAgICAgICBjdXJyU2xpZGUgKz0gMTtcbiAgICAgICAgICAgIHNsaWRlckVsbS5zdHlsZS5yaWdodCA9IGAke2N1cnJTbGlkZSAqIDEwMH0lYDtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVCdXR0b25zKG5leHRCdXR0b24sIGJhY2tCdXR0b24sIGN1cnJTbGlkZSwgbWF4U2xpZGUsIG1pblNsaWRlKTtcbiAgICB9KTtcbiAgICBiYWNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAoY3VyclNsaWRlID4gbWluU2xpZGUpIHtcbiAgICAgICAgICAgIGN1cnJTbGlkZSAtPSAxO1xuICAgICAgICAgICAgc2xpZGVyRWxtLnN0eWxlLnJpZ2h0ID0gYCR7Y3VyclNsaWRlICogMTAwfSVgO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUJ1dHRvbnMobmV4dEJ1dHRvbiwgYmFja0J1dHRvbiwgY3VyclNsaWRlLCBtYXhTbGlkZSwgbWluU2xpZGUpO1xuICAgIH0pO1xuXG4gICAgdXBkYXRlQnV0dG9ucyhuZXh0QnV0dG9uLCBiYWNrQnV0dG9uLCBjdXJyU2xpZGUsIG1heFNsaWRlLCBtaW5TbGlkZSk7XG5cbiAgICBjb25zdCBjaGFuZ2VDUFMgPSAoY2FyZHNQZXJTKSA9PiB7XG4gICAgICAgIG1heFNsaWRlID0gY2FyZENvdW50IC8gY2FyZHNQZXJTO1xuICAgICAgICBjYWxjZWRXaWR0aCA9IDEwMCAqIG1heFNsaWRlO1xuICAgICAgICBzbGlkZXJFbG0uc3R5bGUud2lkdGggPSBgJHtjYWxjZWRXaWR0aH0lYDtcbiAgICAgICAgaWYgKGlzR3JpZCkge1xuICAgICAgICAgICAgc2xpZGVyRWxtLnN0eWxlLmdyaWRBdXRvQ29sdW1ucyA9IGAke2NhbGNlZFdpZHRoIC8gY2FyZENvdW50fSVgO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUJ1dHRvbnMobmV4dEJ1dHRvbiwgYmFja0J1dHRvbiwgY3VyclNsaWRlLCBtYXhTbGlkZSwgbWluU2xpZGUpO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRDdXJyU2xpZGUgPSAoKSA9PiBjdXJyU2xpZGU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjaGFuZ2VDUFMsXG4gICAgICAgIGdldEN1cnJTbGlkZSxcbiAgICB9O1xufVxuIiwiLy8gLS0tLSBDT0xPUiBDSEFOR0lORyBTVFVGRiAtLS0tIC8vXG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGhleCB0byBSR0JcbmZ1bmN0aW9uIGhleFRvUmdiKGhleCkge1xuICAgIGNvbnN0IGJpZ2ludCA9IHBhcnNlSW50KGhleC5zbGljZSgxKSwgMTYpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IChiaWdpbnQgPj4gMTYpICYgMjU1LFxuICAgICAgICBnOiAoYmlnaW50ID4+IDgpICYgMjU1LFxuICAgICAgICBiOiBiaWdpbnQgJiAyNTUsXG4gICAgfTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgUkdCIHRvIGhleFxuZnVuY3Rpb24gcmdiVG9IZXgociwgZywgYikge1xuICAgIGNvbnN0IHRvSGV4ID0gKGMpID0+IGAwJHtjLnRvU3RyaW5nKDE2KX1gLnNsaWNlKC0yKTtcbiAgICByZXR1cm4gYCMke3RvSGV4KHIpfSR7dG9IZXgoZyl9JHt0b0hleChiKX1gO1xufVxuXG4vLyBGdW5jdGlvbiB0byBpbnRlcnBvbGF0ZSBjb2xvciBiZXR3ZWVuIG9yYW5nZSBhbmQgYmx1ZVxuY29uc3QgZGFya0JsdWUgPSAnIzA4NDE1Qyc7IC8vIEJsdWVcbmNvbnN0IGxpZ2h0Qmx1ZSA9ICcjRjZBRjY1JztcbmNvbnN0IGJhckJsdWUgPSAnIzM5OTNERCc7XG5cbmNvbnN0IGRhcmtPcmFuZ2UgPSAnI2FiMzg2Zic7IC8vIE9yYW5nZVxuY29uc3QgbGlnaHRPcmFuZ2UgPSAnI0Y2QUY2NSc7XG5jb25zdCBiYXJPcmcgPSAnI0Y2QUY2NSc7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlQ29sb3IodmFsdWUpIHtcbiAgICBjb25zdCBpc0NvbGQgPSB2YWx1ZSA8IDY1O1xuICAgIGNvbnN0IHN0YXJ0SGV4ID0gaXNDb2xkID8gZGFya0JsdWUgOiBkYXJrT3JhbmdlO1xuICAgIGNvbnN0IGVuZEhleCA9IGlzQ29sZCA/IGxpZ2h0Qmx1ZSA6IGxpZ2h0T3JhbmdlO1xuICAgIGNvbnN0IGJhckNvbG9yID0gaXNDb2xkID8gYmFyQmx1ZSA6IGJhck9yZztcbiAgICBjb25zdCB0ZXh0Q29sb3IgPSBpc0NvbGQgPyBkYXJrQmx1ZSA6IGRhcmtPcmFuZ2U7XG5cbiAgICBjb25zdCBzdGFydENvbG9yID0gaGV4VG9SZ2Ioc3RhcnRIZXgpO1xuICAgIGNvbnN0IGVuZENvbG9yID0gaGV4VG9SZ2IoZW5kSGV4KTtcblxuICAgIGNvbnN0IHIgPSBNYXRoLnJvdW5kKFxuICAgICAgICBzdGFydENvbG9yLnIgKyAoZW5kQ29sb3IuciAtIHN0YXJ0Q29sb3IucikgKiAodmFsdWUgLyAxMDApXG4gICAgKTtcbiAgICBjb25zdCBnID0gTWF0aC5yb3VuZChcbiAgICAgICAgc3RhcnRDb2xvci5nICsgKGVuZENvbG9yLmcgLSBzdGFydENvbG9yLmcpICogKHZhbHVlIC8gMTAwKVxuICAgICk7XG4gICAgY29uc3QgYiA9IE1hdGgucm91bmQoXG4gICAgICAgIHN0YXJ0Q29sb3IuYiArIChlbmRDb2xvci5iIC0gc3RhcnRDb2xvci5iKSAqICh2YWx1ZSAvIDEwMClcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJnYlRvSGV4KHN0YXJ0Q29sb3Iuciwgc3RhcnRDb2xvci5nLCBzdGFydENvbG9yLmIpLFxuICAgICAgICBlbmQ6IHJnYlRvSGV4KHIsIGcsIGIpLFxuICAgICAgICBiYXI6IGJhckNvbG9yLFxuICAgICAgICB0ZXh0OiB0ZXh0Q29sb3IsXG4gICAgfTtcbn1cblxuLy8gRnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBncmFkaWVudCBiYXNlZCBvbiBhIHZhbHVlXG5mdW5jdGlvbiB1cGRhdGVHcmFkaWVudCh2YWx1ZSkge1xuICAgIGNvbnN0IGNvbG9yID0gaW50ZXJwb2xhdGVDb2xvcih2YWx1ZSk7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gYGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICR7Y29sb3Iuc3RhcnR9LCAke2NvbG9yLmVuZH0pYDtcblxuICAgIGNvbnN0IGJhcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGVtcC1iYXInKTtcbiAgICBiYXJzLmZvckVhY2goKGJhcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhiYXIpO1xuICAgICAgICBiYXIuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yLmJhcjtcbiAgICAgICAgYmFyLnN0eWxlLmNvbG9yID0gY29sb3IudGV4dDtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyB1cGRhdGVHcmFkaWVudCB9O1xuIiwiaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgeyBmb3JtYXQsIHBhcnNlSVNPIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgbWFrZSwgcXVlcnkgfSBmcm9tICdqZWZmLXF1ZXJ5JztcbmltcG9ydCBjcmVhdGVTbGlkZXIgZnJvbSAnLi9zbGlkZXInO1xuaW1wb3J0IGJhY2tncmFkaWVudGVyIGZyb20gJy4vYmFja2dyYWRpZW50ZXInO1xuXG4vLyBXZWF0aGVyYXBpIGtleVxuY29uc3QgQVBJX0tFWSA9ICdhY2I3NDVlNzViYzc0YTM1YmQ2MTIzNTAyMzIzMTInO1xuXG5sZXQgd2VhdGhlckRhdGEgPSBudWxsO1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkRGF0YShjaXR5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICAgIGBodHRwOi8vYXBpLndlYXRoZXJhcGkuY29tL3YxL2ZvcmVjYXN0Lmpzb24/a2V5PSR7QVBJX0tFWX0mcT0ke2NpdHl9JmRheXM9MyZhcWk9bm8mYWxlcnRzPW5vYCxcbiAgICAgICAgICAgIHsgbW9kZTogJ2NvcnMnIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgY29uc3QgZGF5cyA9IGRhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXk7XG5cbiAgICAgICAgY29uc3QgZGFpbHlEYXRhID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgZGF5RGF0YSA9IGRheXNbaV07XG4gICAgICAgICAgICBjb25zdCB7IGRhdGUgfSA9IGRheURhdGE7XG4gICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSBkYXlEYXRhLmRheS5jb25kaXRpb24udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IGF2Z1RlbXBGID0gZGF5RGF0YS5kYXkuYXZndGVtcF9mO1xuICAgICAgICAgICAgY29uc3QgcmFpbkNoYW5jZSA9IGRheURhdGEuZGF5LmRhaWx5X2NoYW5jZV9vZl9yYWluO1xuICAgICAgICAgICAgY29uc3Qgc25vd0NoYW5jZSA9IGRheURhdGEuZGF5LmRhaWx5X2NoYW5jZV9vZl9zbm93O1xuXG4gICAgICAgICAgICBjb25zdCBvZ0ljb25MaW5rID0gZGF5RGF0YS5kYXkuY29uZGl0aW9uLmljb247XG4gICAgICAgICAgICBjb25zdCBpY29uTGluayA9IG9nSWNvbkxpbmsucmVwbGFjZSgnLy9jZG4ud2VhdGhlcmFwaS5jb20nLCAnLicpOyAvLyBJIGp1c3QgcHV0IHRoZSBzaXRlcycgaW1hZ2VzIGluIHRoZSBkaXN0IGZvbGRlciBtYW51YWxseSBzbyBpIGRvbnQgaGF2ZSB0byBoYXNzbGUgd2l0aCBpbXBvcnRpbmcgdGhlIGRvemVucyBvZiBpbWFnZXMgc29tZWhvd1xuICAgICAgICAgICAgY29uc3QgaG91cmx5RGF0YSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXlEYXRhLmhvdXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBob3VyRGF0ZSA9IGRheURhdGEuaG91cltqXS50aW1lO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZERhdGUgPSBwYXJzZUlTTyhob3VyRGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvZ0hvdXJJY29uTGluayA9IGRheURhdGEuaG91cltqXS5jb25kaXRpb24uaWNvbjtcbiAgICAgICAgICAgICAgICBjb25zdCBpY29uSG91ckxpbmsgPSBvZ0hvdXJJY29uTGluay5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAnLy9jZG4ud2VhdGhlcmFwaS5jb20nLFxuICAgICAgICAgICAgICAgICAgICAnLidcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaG91ckRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IGZvcm1hdChwYXJzZWREYXRlLCAnaDptbSBhJyksXG4gICAgICAgICAgICAgICAgICAgIHRlbXBGOiBkYXlEYXRhLmhvdXJbal0udGVtcF9mLFxuICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IGRheURhdGEuaG91cltqXS5jb25kaXRpb24udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgaWNvbkxpbms6IGljb25Ib3VyTGluayxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGhvdXJseURhdGEucHVzaChob3VyRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhaWx5RGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgICAgIGF2Z1RlbXBGLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbixcbiAgICAgICAgICAgICAgICByYWluQ2hhbmNlLFxuICAgICAgICAgICAgICAgIHNub3dDaGFuY2UsXG4gICAgICAgICAgICAgICAgaG91cmx5RGF0YSxcbiAgICAgICAgICAgICAgICBpY29uTGluayxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coZGFpbHlEYXRhKTtcblxuICAgICAgICByZXR1cm4gZGFpbHlEYXRhO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2FyZChkZWdyZWVzLCB0aW1lLCBjb25kaXRpb24sIGJhckhlaWdodCwgaWNvblNyYykge1xuICAgIGNvbnN0IGNhcmQgPSBtYWtlKCcuY2FyZCcpO1xuICAgIGNvbnN0IHRlbXBCYXIgPSBtYWtlKCcudGVtcC1iYXInLCBjYXJkKTtcbiAgICB0ZW1wQmFyLnN0eWxlLmhlaWdodCA9IGAke2JhckhlaWdodH0lYDtcblxuICAgIGNvbnN0IHRlbXBEaXNwID0gbWFrZSgnLnRlbXAtZGlzcGxheScsIHRlbXBCYXIpO1xuICAgIHRlbXBEaXNwLnRleHRDb250ZW50ID0gYCR7ZGVncmVlc33CsGA7XG4gICAgY29uc3QgdGltZURpc3AgPSBtYWtlKCcudGltZScsIGNhcmQpO1xuICAgIHRpbWVEaXNwLnRleHRDb250ZW50ID0gdGltZTtcblxuICAgIGNvbnN0IGNvbmRJY29uID0gbWFrZSgnaW1nLmNvbmRpdGlvbi1pY29uJywgY2FyZCk7XG4gICAgY29uZEljb24uc3JjID0gaWNvblNyYztcbiAgICBjb25kSWNvbi5hbHQgPSBjb25kaXRpb247XG5cbiAgICByZXR1cm4gY2FyZDtcbn1cblxuZnVuY3Rpb24gbWFrZUhvdXJTbGlkZXIoY2FyZENvdW50LCBjYXJkc1BlclNsaWRlKSB7XG4gICAgY29uc3QgbmV4dEJ1dHRvbiA9IHF1ZXJ5KCcuY2Fyb3VzZWwgLnJpZ2h0LmFycm93Jyk7XG4gICAgY29uc3QgYmFja0J1dHRvbiA9IHF1ZXJ5KCcuY2Fyb3VzZWwgLmxlZnQuYXJyb3cnKTtcbiAgICBjb25zdCBzbGlkZXJFbG0gPSBxdWVyeSgnLmNhcm91c2VsIC5zbGlkZXItYm9hcmQnKTtcblxuICAgIGNyZWF0ZVNsaWRlcihcbiAgICAgICAgbmV4dEJ1dHRvbixcbiAgICAgICAgYmFja0J1dHRvbixcbiAgICAgICAgc2xpZGVyRWxtLFxuICAgICAgICBjYXJkQ291bnQsXG4gICAgICAgIGNhcmRzUGVyU2xpZGUsXG4gICAgICAgIHRydWVcbiAgICApO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5SG91cmx5RGF0YShkYXlJbmQpIHtcbiAgICBjb25zdCBzbGlkZXJCb2FyZCA9IHF1ZXJ5KCdtYWluIC5zbGlkZXItYm9hcmQnKTtcbiAgICBzbGlkZXJCb2FyZC50ZXh0Q29udGVudCA9ICcnO1xuICAgIGNvbnN0IGRheSA9IHdlYXRoZXJEYXRhW2RheUluZF07XG5cbiAgICBjb25zdCBtYXhUZW1wID0gZGF5LmhvdXJseURhdGEucmVkdWNlKFxuICAgICAgICAobWF4LCBuZXh0VmFsKSA9PiAobmV4dFZhbC50ZW1wRiA+IG1heCA/IG5leHRWYWwudGVtcEYgOiBtYXgpLFxuICAgICAgICAwXG4gICAgKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5LmhvdXJseURhdGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaG91ciA9IGRheS5ob3VybHlEYXRhW2ldO1xuICAgICAgICBsZXQgYmFySGVpZ2h0ID0gKGhvdXIudGVtcEYgLyBtYXhUZW1wKSAqIDEwMDtcbiAgICAgICAgYmFySGVpZ2h0ID0gYmFySGVpZ2h0IDwgMTUgPyAxNSA6IGJhckhlaWdodDtcbiAgICAgICAgY29uc3QgbmV3Q2FyZCA9IGNyZWF0ZUNhcmQoXG4gICAgICAgICAgICBob3VyLnRlbXBGLFxuICAgICAgICAgICAgaG91ci50aW1lLFxuICAgICAgICAgICAgaG91ci5jb25kaXRpb24sXG4gICAgICAgICAgICBiYXJIZWlnaHQsXG4gICAgICAgICAgICBob3VyLmljb25MaW5rXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUubG9nKGhvdXIuaWNvbkxpbmspO1xuICAgICAgICBzbGlkZXJCb2FyZC5hcHBlbmQobmV3Q2FyZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2FkRGF5RGF0YShkYXlJbmQpIHtcbiAgICBjb25zdCBjdXJyRGF5ID0gd2VhdGhlckRhdGFbZGF5SW5kXTtcblxuICAgIGNvbnN0IGljb25FbGVtZW50ID0gcXVlcnkoJy50b2RheXMtc3RhdHMgLmNvbmRpdGlvbi1pY29uJyk7XG4gICAgY29uc3QgaW1hZ2UgPSBjdXJyRGF5Lmljb25MaW5rO1xuICAgIGljb25FbGVtZW50LnNyYyA9IGltYWdlO1xuXG4gICAgY29uc3QgdGVtcERpc3BsYXlFbGVtZW50ID0gcXVlcnkoJy50b2RheXMtc3RhdHMgLnRlbXAtZGlzcGxheScpO1xuICAgIHRlbXBEaXNwbGF5RWxlbWVudC50ZXh0Q29udGVudCA9IGAke2N1cnJEYXkuYXZnVGVtcEZ9wrBgO1xuXG4gICAgY29uc3QgY29uZGl0aW9uVGV4dEVsZW1lbnQgPSBxdWVyeSgnLnRvZGF5cy1zdGF0cyAuY29uZGl0aW9uLXRleHQnKTtcbiAgICBjb25kaXRpb25UZXh0RWxlbWVudC50ZXh0Q29udGVudCA9IGAke2N1cnJEYXkuY29uZGl0aW9ufS5gO1xuXG4gICAgY29uc3QgcmFpbkNoYW5jZXJFbGVtZW50ID0gcXVlcnkoJy50b2RheXMtc3RhdHMgLnJhaW4tY2hhbmNlcicpO1xuICAgIHJhaW5DaGFuY2VyRWxlbWVudC50ZXh0Q29udGVudCA9IGAke2N1cnJEYXkucmFpbkNoYW5jZX0lYDtcbiAgICByYWluQ2hhbmNlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IGByYWRpYWwtZ3JhZGllbnQoY2xvc2VzdC1zaWRlLCAjMmIzMDNhZmYgODUlLCB0cmFuc3BhcmVudCA4MCUgMTAwJSksIGNvbmljLWdyYWRpZW50KHJnYig5NiwgMTkyLCAyMTQpICR7Y3VyckRheS5yYWluQ2hhbmNlfSUsIHJnYmEoMTcxLCAxNzIsIDE3MSwgMC4zMykgMClgO1xuXG4gICAgY29uc3Qgc25vd0NoYW5jZXJFbGVtZW50ID0gcXVlcnkoJy50b2RheXMtc3RhdHMgLnNub3ctY2hhbmNlcicpO1xuICAgIHNub3dDaGFuY2VyRWxlbWVudC50ZXh0Q29udGVudCA9IGAke2N1cnJEYXkuc25vd0NoYW5jZX0lYDtcbiAgICBzbm93Q2hhbmNlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IGByYWRpYWwtZ3JhZGllbnQoY2xvc2VzdC1zaWRlLCAjMmIzMDNhZmYgODUlLCB0cmFuc3BhcmVudCA4MCUgMTAwJSksIGNvbmljLWdyYWRpZW50KHJnYigyNTEsIDE1OSwgMjE1KSAke2N1cnJEYXkuc25vd0NoYW5jZX0lLCByZ2JhKDE3MSwgMTcyLCAxNzEsIDAuMzMpIDApYDtcblxuICAgIGRpc3BsYXlIb3VybHlEYXRhKGRheUluZCk7XG4gICAgYmFja2dyYWRpZW50ZXIudXBkYXRlR3JhZGllbnQoY3VyckRheS5hdmdUZW1wRik7XG59XG5cbmxldCBjdXJyRGF5U2xpZGUgPSAwO1xuXG5mdW5jdGlvbiBtYWtlRGF5U2xpZGVyKCkge1xuICAgIGNvbnN0IGRheUNoYW5nZXJFbGVtZW50ID0gcXVlcnkoJy5kYXktY2hhbmdlcicpO1xuICAgIGNvbnN0IHNsaWRlckVsZW1lbnQgPSBxdWVyeSgnLnNsaWRlcicsIGRheUNoYW5nZXJFbGVtZW50KTtcbiAgICBjb25zdCBsZWZ0QXJyb3dFbGVtZW50ID0gcXVlcnkoJy5sZWZ0LmFycm93JywgZGF5Q2hhbmdlckVsZW1lbnQpO1xuICAgIGNvbnN0IHJpZ2h0QXJyb3dFbGVtZW50ID0gcXVlcnkoJy5yaWdodC5hcnJvdycsIGRheUNoYW5nZXJFbGVtZW50KTtcblxuICAgIGNvbnN0IHNsaWRlciA9IGNyZWF0ZVNsaWRlcihcbiAgICAgICAgcmlnaHRBcnJvd0VsZW1lbnQsXG4gICAgICAgIGxlZnRBcnJvd0VsZW1lbnQsXG4gICAgICAgIHNsaWRlckVsZW1lbnQsXG4gICAgICAgIDMsXG4gICAgICAgIDEsXG4gICAgICAgIGZhbHNlXG4gICAgKTtcblxuICAgIGNvbnN0IGNoYW5nZURheSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VyclNsaWRlID0gc2xpZGVyLmdldEN1cnJTbGlkZSgpO1xuICAgICAgICBsb2FkRGF5RGF0YShjdXJyU2xpZGUpO1xuICAgICAgICBjdXJyRGF5U2xpZGUgPSBjdXJyU2xpZGU7XG4gICAgfTtcblxuICAgIGxlZnRBcnJvd0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VEYXkpO1xuICAgIHJpZ2h0QXJyb3dFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hhbmdlRGF5KTtcbn1cblxuZnVuY3Rpb24gY2l0eVNlYXJjaFNldHVwKCkge1xuICAgIGNvbnN0IHNlYXJjaGVyID0gcXVlcnkoJyNzZWFyY2gnKTtcbiAgICBjb25zdCBzZWFyY2hFcnJvciA9IHF1ZXJ5KCcjc2VhcmNoICsgLmVycm9yJyk7XG5cbiAgICBsZXQgbGFzdFNlYXJjaCA9ICdIZWxsJztcbiAgICBzZWFyY2hlci52YWx1ZSA9ICdIZWxsJztcbiAgICBzZWFyY2hlci5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkRGF0YSA9IHdlYXRoZXJEYXRhO1xuICAgICAgICAgICAgICAgIHdlYXRoZXJEYXRhID0gYXdhaXQgbG9hZERhdGEoc2VhcmNoZXIudmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHdlYXRoZXJEYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHdlYXRoZXJEYXRhID0gb2xkRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoZXIudmFsdWUgPSBsYXN0U2VhcmNoO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hlci5zZXRDdXN0b21WYWxpZGl0eSgnTm8gc3VjaCBjaXR5IScpO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hFcnJvci50ZXh0Q29udGVudCA9ICdObyBzdWNoIGNpdHkhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hlci5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaEVycm9yLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGxvYWREYXlEYXRhKGN1cnJEYXlTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZWFyY2ggPSBzZWFyY2hlci52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmxvYWREYXRhKCdIZWxsJylcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB3ZWF0aGVyRGF0YSA9IGRhdGE7XG4gICAgICAgIG1ha2VEYXlTbGlkZXIoKTtcbiAgICAgICAgbWFrZUhvdXJTbGlkZXIoMjQsIDEyKTtcbiAgICAgICAgY2l0eVNlYXJjaFNldHVwKCk7XG5cbiAgICAgICAgbG9hZERheURhdGEoMCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJnZXROZXh0U2VwYXJhdG9yIiwic3RhcnQiLCJzZWxlY3RvciIsIm5leHRIYXNoIiwiaW5kZXhPZiIsIm5leHREb3QiLCJwYXJlbnQiLCJsYXN0SW5kIiwiY29ycmVjdGVkTGFzdEluZCIsInR5cGVOYW1lIiwic2xpY2UiLCJ0eXBlIiwiY2xhc3NlcyIsImluZCIsImNvcnJlY3RlZEluZCIsInN1YlN0ciIsImNvbnNvbGUiLCJlcnJvciIsImF0IiwidW5zaGlmdCIsIm5ld0VsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGF6eiIsImNsYXNzTGlzdCIsImFkZCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsIk1hdGgiLCJwb3ciLCJtaWxsaXNlY29uZHNJbldlZWsiLCJtaWxsaXNlY29uZHNJbkRheSIsIm1pbGxpc2Vjb25kc0luTWludXRlIiwibWlsbGlzZWNvbmRzSW5Ib3VyIiwicGFyc2VJU08iLCJhcmd1bWVudCIsImFkZGl0aW9uYWxEaWdpdHMiLCJkYXRlU3RyaW5ncyIsImRhdGVTdHJpbmciLCJhcnJheSIsInNwbGl0IiwicGF0dGVybnMiLCJkYXRlVGltZURlbGltaXRlciIsInRpbWVTdHJpbmciLCJ0ZXN0IiwiZGF0ZSIsInRpbWVab25lRGVsaW1pdGVyIiwic3Vic3RyIiwidG9rZW4iLCJ0aW1lem9uZSIsImV4ZWMiLCJ0aW1lIiwicmVwbGFjZSIsInNwbGl0RGF0ZVN0cmluZyIsInBhcnNlWWVhclJlc3VsdCIsInJlZ2V4IiwiUmVnRXhwIiwiY2FwdHVyZXMiLCJtYXRjaCIsInllYXIiLCJOYU4iLCJyZXN0RGF0ZVN0cmluZyIsInBhcnNlSW50IiwiY2VudHVyeSIsInBhcnNlWWVhciIsIkRhdGUiLCJkYXRlUmVnZXgiLCJpc1dlZWtEYXRlIiwiZGF5T2ZZZWFyIiwicGFyc2VEYXRlVW5pdCIsIm1vbnRoIiwiZGF5Iiwid2VlayIsImRheU9mV2VlayIsIl95ZWFyIiwidmFsaWRhdGVXZWVrRGF0ZSIsImlzb1dlZWtZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJkaWZmIiwiZ2V0VVRDRGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJkYXlPZklTT1dlZWtZZWFyIiwiZGF5c0luTW9udGhzIiwiaXNMZWFwWWVhckluZGV4IiwidmFsaWRhdGVEYXRlIiwidmFsaWRhdGVEYXlPZlllYXJEYXRlIiwibWF4IiwicGFyc2VEYXRlIiwiaXNOYU4iLCJnZXRUaW1lIiwidGltZXN0YW1wIiwib2Zmc2V0IiwidGltZVJlZ2V4IiwiaG91cnMiLCJwYXJzZVRpbWVVbml0IiwibWludXRlcyIsInNlY29uZHMiLCJ2YWxpZGF0ZVRpbWUiLCJwYXJzZVRpbWUiLCJkaXJ0eURhdGUiLCJzZXRGdWxsWWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJzZXRIb3VycyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJ0aW1lem9uZVN0cmluZyIsInRpbWV6b25lUmVnZXgiLCJzaWduIiwiX2hvdXJzIiwidmFsaWRhdGVUaW1lem9uZSIsInBhcnNlVGltZXpvbmUiLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJ0b0RhdGUiLCJhcmdTdHIiLCJjb25zdHJ1Y3RvciIsImlzVmFsaWQiLCJfZGF0ZSIsIk51bWJlciIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImFyZ3MiLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmb3JtYXRMb25nIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsImxvY2FsaXplIiwib3JkaW5hbE51bWJlciIsImRpcnR5TnVtYmVyIiwiX29wdGlvbnMiLCJudW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJBcnJheSIsImlzQXJyYXkiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJvYmplY3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZVJlc3VsdCIsImFueSIsImVuVVMiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlblZhbHVlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdFJlbGF0aXZlIiwiX2Jhc2VEYXRlIiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsInN0YXJ0T2ZEYXkiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImNvbnN0cnVjdEZyb20iLCJnZXREYXlPZlllYXIiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsInRpbWVzdGFtcFJpZ2h0Iiwicm91bmQiLCJkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMiLCJjbGVhbkRhdGUiLCJzdGFydE9mWWVhciIsInN0YXJ0T2ZXZWVrIiwibG9jYWxlIiwiZ2V0RGF5Iiwic2V0RGF0ZSIsInN0YXJ0T2ZJU09XZWVrIiwiZ2V0SVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImdldElTT1dlZWsiLCJmb3VydGhPZkphbnVhcnkiLCJzdGFydE9mSVNPV2Vla1llYXIiLCJnZXRXZWVrWWVhciIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwiZ2V0V2VlayIsImZpcnN0V2VlayIsInN0YXJ0T2ZXZWVrWWVhciIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsImFicyIsInBhZFN0YXJ0IiwibGlnaHRGb3JtYXR0ZXJzIiwieSIsInNpZ25lZFllYXIiLCJNIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwidG9VcHBlckNhc2UiLCJoIiwiSCIsIm0iLCJzIiwiUyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZmxvb3IiLCJmb3JtYXR0ZXJzIiwiRyIsInVuaXQiLCJZIiwic2lnbmVkV2Vla1llYXIiLCJ3ZWVrWWVhciIsIlIiLCJ1IiwiUSIsImNlaWwiLCJxIiwiTCIsInciLCJJIiwiaXNvV2VlayIsIkQiLCJFIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaXNvRGF5T2ZXZWVrIiwidG9Mb3dlckNhc2UiLCJiIiwiQiIsIksiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIngiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsImRlbGltaXRlciIsImFic09mZnNldCIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsInRpbWVMb25nRm9ybWF0dGVyIiwibG9uZ0Zvcm1hdHRlcnMiLCJwIiwiUCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZUZvcm1hdCIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiUmFuZ2VFcnJvciIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZm9ybWF0U3RyIiwiZm9ybWF0dGVyT3B0aW9ucyIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsIm1hdGNoZWQiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsInVwZGF0ZUJ1dHRvbnMiLCJuZXh0QnV0dG9uIiwiYmFja0J1dHRvbiIsImN1cnJTbGlkZSIsIm1heFNsaWRlIiwibWluU2xpZGUiLCJjYW5TbGlkZUZvcndhcmQiLCJjYW5TbGlkZUJhY2siLCJkaXNhYmxlZCIsImNyZWF0ZVNsaWRlciIsInNsaWRlckVsbSIsImNhcmRDb3VudCIsImNhcmRzUGVyU2xpZGUiLCJpc0dyaWQiLCJjYWxjZWRXaWR0aCIsImdyaWRBdXRvQ29sdW1ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyaWdodCIsImNoYW5nZUNQUyIsImNhcmRzUGVyUyIsImdldEN1cnJTbGlkZSIsImhleFRvUmdiIiwiaGV4IiwiYmlnaW50IiwiciIsImciLCJyZ2JUb0hleCIsInRvSGV4IiwiZGFya0JsdWUiLCJkYXJrT3JhbmdlIiwiY29sb3IiLCJpc0NvbGQiLCJiYXJDb2xvciIsInRleHRDb2xvciIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsImVuZCIsImJhciIsInRleHQiLCJpbnRlcnBvbGF0ZUNvbG9yIiwiYm9keSIsImJhY2tncm91bmQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImxvZyIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJsIiwiZiIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJldHVybiIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJpbmZvIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJhcmd1bWVudHMiLCJlcnIiLCJBUElfS0VZIiwid2VhdGhlckRhdGEiLCJsb2FkRGF0YSIsIl94IiwiX2xvYWREYXRhIiwiX2NhbGxlZTIiLCJjaXR5IiwicmVzcG9uc2UiLCJkYXlzIiwiZGFpbHlEYXRhIiwiZGF5RGF0YSIsImNvbmRpdGlvbiIsImF2Z1RlbXBGIiwicmFpbkNoYW5jZSIsInNub3dDaGFuY2UiLCJvZ0ljb25MaW5rIiwiaWNvbkxpbmsiLCJob3VybHlEYXRhIiwiaiIsImhvdXJEYXRlIiwicGFyc2VkRGF0ZSIsIm9nSG91ckljb25MaW5rIiwiaWNvbkhvdXJMaW5rIiwiaG91ckRhdGEiLCJfY29udGV4dDIiLCJmZXRjaCIsIm1vZGUiLCJqc29uIiwiZm9yZWNhc3QiLCJmb3JlY2FzdGRheSIsImF2Z3RlbXBfZiIsImRhaWx5X2NoYW5jZV9vZl9yYWluIiwiZGFpbHlfY2hhbmNlX29mX3Nub3ciLCJpY29uIiwiaG91ciIsInRlbXBGIiwidGVtcF9mIiwidDAiLCJjcmVhdGVDYXJkIiwiZGVncmVlcyIsImJhckhlaWdodCIsImljb25TcmMiLCJjYXJkIiwibWFrZSIsInRlbXBCYXIiLCJoZWlnaHQiLCJ0ZXh0Q29udGVudCIsImNvbmRJY29uIiwic3JjIiwiYWx0IiwibG9hZERheURhdGEiLCJkYXlJbmQiLCJjdXJyRGF5IiwiaWNvbkVsZW1lbnQiLCJxdWVyeSIsImltYWdlIiwicmFpbkNoYW5jZXJFbGVtZW50Iiwic25vd0NoYW5jZXJFbGVtZW50Iiwic2xpZGVyQm9hcmQiLCJtYXhUZW1wIiwicmVkdWNlIiwibmV4dFZhbCIsIm5ld0NhcmQiLCJkaXNwbGF5SG91cmx5RGF0YSIsImJhY2tncmFkaWVudGVyIiwiY3VyckRheVNsaWRlIiwiZGF5Q2hhbmdlckVsZW1lbnQiLCJzbGlkZXJFbGVtZW50IiwibGVmdEFycm93RWxlbWVudCIsInJpZ2h0QXJyb3dFbGVtZW50Iiwic2xpZGVyIiwiY2hhbmdlRGF5Iiwic2VhcmNoZXIiLCJzZWFyY2hFcnJvciIsImxhc3RTZWFyY2giLCJfcmVmIiwiX2NhbGxlZSIsImV2ZW50Iiwib2xkRGF0YSIsIl9jb250ZXh0Iiwic2V0Q3VzdG9tVmFsaWRpdHkiLCJfeDIiXSwic291cmNlUm9vdCI6IiJ9